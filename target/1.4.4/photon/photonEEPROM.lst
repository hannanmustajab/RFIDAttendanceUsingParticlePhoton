
/Users/abdulhannanmustajab/Desktop/Projects/IoT/Particle/tempLogger/photon-EEPROM/photonEEPROM/target/1.4.4/photon/photonEEPROM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001b84  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a1ba0  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  20000000  080a1ba4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000005b0  20000068  20000068  00030068  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a1c0c  080a1c0c  00021c0c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a1c34  080a1c34  00021c34  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000c2b95  00000000  00000000  00021c38  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001180d  00000000  00000000  000e47cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000194eb  00000000  00000000  000f5fda  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002208  00000000  00000000  0010f4c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00003700  00000000  00000000  001116cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000278de  00000000  00000000  00114dcd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00029f56  00000000  00000000  0013c6ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000a7d28  00000000  00000000  00166601  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000c204  00000000  00000000  0020e32c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f001 fbcb 	bl	80a17c8 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f001 fbd0 	bl	80a17de <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a1ba4 	.word	0x080a1ba4
 80a004c:	20000068 	.word	0x20000068
 80a0050:	20000068 	.word	0x20000068
 80a0054:	20000618 	.word	0x20000618
 80a0058:	20000618 	.word	0x20000618

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f001 f981 	bl	80a1364 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a1b5c 	.word	0x080a1b5c
 80a0084:	080a1ba0 	.word	0x080a1ba0

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 bac6 	b.w	80a0618 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 faef 	bl	80a0670 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f001 b927 	b.w	80a12e8 <_post_loop>

080a009a <_ZdlPv>:
 80a009a:	f000 bc99 	b.w	80a09d0 <free>

080a009e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a009e:	7800      	ldrb	r0, [r0, #0]
 80a00a0:	fab0 f080 	clz	r0, r0
 80a00a4:	0940      	lsrs	r0, r0, #5
 80a00a6:	4770      	bx	lr

080a00a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00a8:	2301      	movs	r3, #1
 80a00aa:	7003      	strb	r3, [r0, #0]
 80a00ac:	4770      	bx	lr

080a00ae <_ZN4RFIDC1Ehhhhh>:
  digitalWrite(NRSTPD, HIGH);
  _NRSTPD = NRSTPD;
}


RFID::RFID(uint8_t chipSelectPin, uint8_t NRSTPD, uint8_t mosiPin, uint8_t misoPin, uint8_t clockPin) {
 80a00ae:	b538      	push	{r3, r4, r5, lr}
 80a00b0:	4604      	mov	r4, r0
  _mosiPin = mosiPin;
 80a00b2:	7303      	strb	r3, [r0, #12]
  _misoPin = misoPin;
 80a00b4:	f89d 3010 	ldrb.w	r3, [sp, #16]
  _clockPin = clockPin;
  _chipSelectPin = chipSelectPin;
  _NRSTPD = NRSTPD;  

  pinMode(NRSTPD,OUTPUT);					// Set digital pin, Not Reset and Power-down
 80a00b8:	b295      	uxth	r5, r2
}


RFID::RFID(uint8_t chipSelectPin, uint8_t NRSTPD, uint8_t mosiPin, uint8_t misoPin, uint8_t clockPin) {
  _mosiPin = mosiPin;
  _misoPin = misoPin;
 80a00ba:	7343      	strb	r3, [r0, #13]
  _clockPin = clockPin;
 80a00bc:	f89d 3014 	ldrb.w	r3, [sp, #20]
  _chipSelectPin = chipSelectPin;
  _NRSTPD = NRSTPD;  
 80a00c0:	72c2      	strb	r2, [r0, #11]


RFID::RFID(uint8_t chipSelectPin, uint8_t NRSTPD, uint8_t mosiPin, uint8_t misoPin, uint8_t clockPin) {
  _mosiPin = mosiPin;
  _misoPin = misoPin;
  _clockPin = clockPin;
 80a00c2:	7383      	strb	r3, [r0, #14]
  _chipSelectPin = chipSelectPin;
 80a00c4:	7281      	strb	r1, [r0, #10]
  _NRSTPD = NRSTPD;  

  pinMode(NRSTPD,OUTPUT);					// Set digital pin, Not Reset and Power-down
 80a00c6:	4628      	mov	r0, r5
 80a00c8:	2101      	movs	r1, #1
 80a00ca:	f001 f99b 	bl	80a1404 <pinMode>
  digitalWrite(NRSTPD, HIGH);
 80a00ce:	4628      	mov	r0, r5
 80a00d0:	2101      	movs	r1, #1
 80a00d2:	f001 f9a8 	bl	80a1426 <digitalWrite>
  
  pinMode(_clockPin, OUTPUT);
 80a00d6:	7ba0      	ldrb	r0, [r4, #14]
 80a00d8:	2101      	movs	r1, #1
 80a00da:	f001 f993 	bl	80a1404 <pinMode>
  pinMode(_mosiPin, OUTPUT);
 80a00de:	7b20      	ldrb	r0, [r4, #12]
 80a00e0:	2101      	movs	r1, #1
 80a00e2:	f001 f98f 	bl	80a1404 <pinMode>
  pinMode(_misoPin, INPUT);
 80a00e6:	7b60      	ldrb	r0, [r4, #13]
 80a00e8:	2100      	movs	r1, #0
 80a00ea:	f001 f98b 	bl	80a1404 <pinMode>
  
  pinMode(_chipSelectPin, OUTPUT);
 80a00ee:	7aa0      	ldrb	r0, [r4, #10]
 80a00f0:	2101      	movs	r1, #1
 80a00f2:	f001 f987 	bl	80a1404 <pinMode>
  digitalWrite(_chipSelectPin, LOW); 
 80a00f6:	7aa0      	ldrb	r0, [r4, #10]
 80a00f8:	2100      	movs	r1, #0
 80a00fa:	f001 f994 	bl	80a1426 <digitalWrite>
}
 80a00fe:	4620      	mov	r0, r4
 80a0100:	bd38      	pop	{r3, r4, r5, pc}
	...

080a0104 <_ZN4RFID12writeMFRC522Ehh>:
	writeMFRC522(CommandReg, PCD_RESETPHASE);
}


void RFID::writeMFRC522(uint8_t addr, uint8_t val)
{
 80a0104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0106:	460e      	mov	r6, r1
 80a0108:	4604      	mov	r4, r0
    digitalWrite(_chipSelectPin, LOW);
 80a010a:	2100      	movs	r1, #0
 80a010c:	7a80      	ldrb	r0, [r0, #10]
	writeMFRC522(CommandReg, PCD_RESETPHASE);
}


void RFID::writeMFRC522(uint8_t addr, uint8_t val)
{
 80a010e:	4615      	mov	r5, r2
    digitalWrite(_chipSelectPin, LOW);
 80a0110:	f001 f989 	bl	80a1426 <digitalWrite>
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

inline void pinSetFast(pin_t _pin)
{
    PIN_MAP[_pin].gpio_peripheral->BSRRL = PIN_MAP[_pin].gpio_pin;
 80a0114:	4b2d      	ldr	r3, [pc, #180]	; (80a01cc <_ZN4RFID12writeMFRC522Ehh+0xc8>)

#if defined(_USE_SOFT_SPI_)
    softSPITranser((addr<<1)&0x7E);	
 80a0116:	0071      	lsls	r1, r6, #1
 80a0118:	681b      	ldr	r3, [r3, #0]
 80a011a:	f001 017e 	and.w	r1, r1, #126	; 0x7e
 80a011e:	2607      	movs	r6, #7
 80a0120:	221c      	movs	r2, #28
uint8_t RFID::softSPITranser(uint8_t data) {

  uint8_t b=0;

  for (uint8_t bit = 0; bit < 8; bit++) {
    if (data & (1 << (7-bit)))		// walks down mask from bit 7 to bit 0
 80a0122:	fa41 f006 	asr.w	r0, r1, r6
 80a0126:	f010 0f01 	tst.w	r0, #1
 80a012a:	7b20      	ldrb	r0, [r4, #12]
 80a012c:	fb02 f000 	mul.w	r0, r2, r0
 80a0130:	eb03 0700 	add.w	r7, r3, r0
 80a0134:	88bf      	ldrh	r7, [r7, #4]
 80a0136:	5818      	ldr	r0, [r3, r0]
 80a0138:	bf14      	ite	ne
 80a013a:	8307      	strhne	r7, [r0, #24]
}

inline void pinResetFast(pin_t _pin)
{
    PIN_MAP[_pin].gpio_peripheral->BSRRH = PIN_MAP[_pin].gpio_pin;
 80a013c:	8347      	strheq	r7, [r0, #26]
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

inline void pinSetFast(pin_t _pin)
{
    PIN_MAP[_pin].gpio_peripheral->BSRRL = PIN_MAP[_pin].gpio_pin;
 80a013e:	7ba0      	ldrb	r0, [r4, #14]
inline __attribute__((always_inline))
uint8_t RFID::softSPITranser(uint8_t data) {

  uint8_t b=0;

  for (uint8_t bit = 0; bit < 8; bit++) {
 80a0140:	f116 36ff 	adds.w	r6, r6, #4294967295	; 0xffffffff
 80a0144:	fb02 f000 	mul.w	r0, r2, r0
 80a0148:	eb03 0700 	add.w	r7, r3, r0
 80a014c:	88bf      	ldrh	r7, [r7, #4]
 80a014e:	5818      	ldr	r0, [r3, r0]
 80a0150:	8307      	strh	r7, [r0, #24]
    PIN_MAP[_pin].gpio_peripheral->BSRRH = PIN_MAP[_pin].gpio_pin;
}

inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
 80a0152:	7b60      	ldrb	r0, [r4, #13]
 80a0154:	fb02 f000 	mul.w	r0, r2, r0
 80a0158:	5818      	ldr	r0, [r3, r0]
 80a015a:	6900      	ldr	r0, [r0, #16]
    PIN_MAP[_pin].gpio_peripheral->BSRRL = PIN_MAP[_pin].gpio_pin;
}

inline void pinResetFast(pin_t _pin)
{
    PIN_MAP[_pin].gpio_peripheral->BSRRH = PIN_MAP[_pin].gpio_pin;
 80a015c:	7ba0      	ldrb	r0, [r4, #14]
 80a015e:	fb02 f000 	mul.w	r0, r2, r0
 80a0162:	eb03 0700 	add.w	r7, r3, r0
 80a0166:	88bf      	ldrh	r7, [r7, #4]
 80a0168:	5818      	ldr	r0, [r3, r0]
 80a016a:	8347      	strh	r7, [r0, #26]
 80a016c:	d2d9      	bcs.n	80a0122 <_ZN4RFID12writeMFRC522Ehh+0x1e>
 80a016e:	2207      	movs	r2, #7
 80a0170:	201c      	movs	r0, #28
    if (data & (1 << (7-bit)))		// walks down mask from bit 7 to bit 0
 80a0172:	fa45 f102 	asr.w	r1, r5, r2
 80a0176:	f011 0f01 	tst.w	r1, #1
 80a017a:	7b21      	ldrb	r1, [r4, #12]
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

inline void pinSetFast(pin_t _pin)
{
    PIN_MAP[_pin].gpio_peripheral->BSRRL = PIN_MAP[_pin].gpio_pin;
 80a017c:	fb00 f101 	mul.w	r1, r0, r1
 80a0180:	eb03 0601 	add.w	r6, r3, r1
 80a0184:	88b6      	ldrh	r6, [r6, #4]
 80a0186:	5859      	ldr	r1, [r3, r1]
 80a0188:	bf14      	ite	ne
 80a018a:	830e      	strhne	r6, [r1, #24]
}

inline void pinResetFast(pin_t _pin)
{
    PIN_MAP[_pin].gpio_peripheral->BSRRH = PIN_MAP[_pin].gpio_pin;
 80a018c:	834e      	strheq	r6, [r1, #26]
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

inline void pinSetFast(pin_t _pin)
{
    PIN_MAP[_pin].gpio_peripheral->BSRRL = PIN_MAP[_pin].gpio_pin;
 80a018e:	7ba1      	ldrb	r1, [r4, #14]
inline __attribute__((always_inline))
uint8_t RFID::softSPITranser(uint8_t data) {

  uint8_t b=0;

  for (uint8_t bit = 0; bit < 8; bit++) {
 80a0190:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
 80a0194:	fb00 f101 	mul.w	r1, r0, r1
 80a0198:	eb03 0601 	add.w	r6, r3, r1
 80a019c:	88b6      	ldrh	r6, [r6, #4]
 80a019e:	5859      	ldr	r1, [r3, r1]
 80a01a0:	830e      	strh	r6, [r1, #24]
    PIN_MAP[_pin].gpio_peripheral->BSRRH = PIN_MAP[_pin].gpio_pin;
}

inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
 80a01a2:	7b61      	ldrb	r1, [r4, #13]
 80a01a4:	fb00 f101 	mul.w	r1, r0, r1
 80a01a8:	5859      	ldr	r1, [r3, r1]
 80a01aa:	6909      	ldr	r1, [r1, #16]
    PIN_MAP[_pin].gpio_peripheral->BSRRL = PIN_MAP[_pin].gpio_pin;
}

inline void pinResetFast(pin_t _pin)
{
    PIN_MAP[_pin].gpio_peripheral->BSRRH = PIN_MAP[_pin].gpio_pin;
 80a01ac:	7ba1      	ldrb	r1, [r4, #14]
 80a01ae:	fb00 f101 	mul.w	r1, r0, r1
 80a01b2:	eb03 0601 	add.w	r6, r3, r1
 80a01b6:	88b6      	ldrh	r6, [r6, #4]
 80a01b8:	5859      	ldr	r1, [r3, r1]
 80a01ba:	834e      	strh	r6, [r1, #26]
 80a01bc:	d2d9      	bcs.n	80a0172 <_ZN4RFID12writeMFRC522Ehh+0x6e>
    //0XXXXXX0 formato de direcciÃƒÂ³n
    SPI.transfer((addr<<1)&0x7E);	
    SPI.transfer(val);
#endif	

	digitalWrite(_chipSelectPin, HIGH);
 80a01be:	7aa0      	ldrb	r0, [r4, #10]
 80a01c0:	2101      	movs	r1, #1
}
 80a01c2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    //0XXXXXX0 formato de direcciÃƒÂ³n
    SPI.transfer((addr<<1)&0x7E);	
    SPI.transfer(val);
#endif	

	digitalWrite(_chipSelectPin, HIGH);
 80a01c6:	f001 b92e 	b.w	80a1426 <digitalWrite>
 80a01ca:	bf00      	nop
 80a01cc:	2000006c 	.word	0x2000006c

080a01d0 <_ZN4RFID5resetEv>:


}
void RFID::reset()
{
	writeMFRC522(CommandReg, PCD_RESETPHASE);
 80a01d0:	220f      	movs	r2, #15
 80a01d2:	2101      	movs	r1, #1
 80a01d4:	f7ff bf96 	b.w	80a0104 <_ZN4RFID12writeMFRC522Ehh>

080a01d8 <_ZN4RFID11readMFRC522Eh>:
 *  DescripciÃƒÂ³n: Desde el MFRC522 leer un byte de un registro de datos
 *  Los parÃƒÂ¡metros de entrada: addr - la direcciÃƒÂ³n de registro
 *  Valor de retorno: Devuelve un byte de datos de lectura
 */
uint8_t RFID::readMFRC522(uint8_t addr)
{
 80a01d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a01da:	460d      	mov	r5, r1
 80a01dc:	4604      	mov	r4, r0
    uint8_t val;
    digitalWrite(_chipSelectPin, LOW);
 80a01de:	2100      	movs	r1, #0
 80a01e0:	7a80      	ldrb	r0, [r0, #10]
 80a01e2:	f001 f920 	bl	80a1426 <digitalWrite>
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

inline void pinSetFast(pin_t _pin)
{
    PIN_MAP[_pin].gpio_peripheral->BSRRL = PIN_MAP[_pin].gpio_pin;
 80a01e6:	4b2d      	ldr	r3, [pc, #180]	; (80a029c <_ZN4RFID11readMFRC522Eh+0xc4>)
	
#if defined(_USE_SOFT_SPI_)
    softSPITranser(((addr<<1)&0x7E) | 0x80);	
 80a01e8:	006d      	lsls	r5, r5, #1
 80a01ea:	f005 057e 	and.w	r5, r5, #126	; 0x7e
 80a01ee:	681b      	ldr	r3, [r3, #0]
 80a01f0:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 80a01f4:	2107      	movs	r1, #7
 80a01f6:	201c      	movs	r0, #28
uint8_t RFID::softSPITranser(uint8_t data) {

  uint8_t b=0;

  for (uint8_t bit = 0; bit < 8; bit++) {
    if (data & (1 << (7-bit)))		// walks down mask from bit 7 to bit 0
 80a01f8:	fa45 f201 	asr.w	r2, r5, r1
 80a01fc:	f012 0f01 	tst.w	r2, #1
 80a0200:	7b22      	ldrb	r2, [r4, #12]
 80a0202:	fb00 f202 	mul.w	r2, r0, r2
 80a0206:	eb03 0602 	add.w	r6, r3, r2
 80a020a:	88b6      	ldrh	r6, [r6, #4]
 80a020c:	589a      	ldr	r2, [r3, r2]
 80a020e:	bf14      	ite	ne
 80a0210:	8316      	strhne	r6, [r2, #24]
}

inline void pinResetFast(pin_t _pin)
{
    PIN_MAP[_pin].gpio_peripheral->BSRRH = PIN_MAP[_pin].gpio_pin;
 80a0212:	8356      	strheq	r6, [r2, #26]
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

inline void pinSetFast(pin_t _pin)
{
    PIN_MAP[_pin].gpio_peripheral->BSRRL = PIN_MAP[_pin].gpio_pin;
 80a0214:	7ba2      	ldrb	r2, [r4, #14]
inline __attribute__((always_inline))
uint8_t RFID::softSPITranser(uint8_t data) {

  uint8_t b=0;

  for (uint8_t bit = 0; bit < 8; bit++) {
 80a0216:	f111 31ff 	adds.w	r1, r1, #4294967295	; 0xffffffff
 80a021a:	fb00 f202 	mul.w	r2, r0, r2
 80a021e:	eb03 0602 	add.w	r6, r3, r2
 80a0222:	88b6      	ldrh	r6, [r6, #4]
 80a0224:	589a      	ldr	r2, [r3, r2]
 80a0226:	8316      	strh	r6, [r2, #24]
    PIN_MAP[_pin].gpio_peripheral->BSRRH = PIN_MAP[_pin].gpio_pin;
}

inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
 80a0228:	7b62      	ldrb	r2, [r4, #13]
 80a022a:	fb00 f202 	mul.w	r2, r0, r2
 80a022e:	589a      	ldr	r2, [r3, r2]
 80a0230:	6912      	ldr	r2, [r2, #16]
    PIN_MAP[_pin].gpio_peripheral->BSRRL = PIN_MAP[_pin].gpio_pin;
}

inline void pinResetFast(pin_t _pin)
{
    PIN_MAP[_pin].gpio_peripheral->BSRRH = PIN_MAP[_pin].gpio_pin;
 80a0232:	7ba2      	ldrb	r2, [r4, #14]
 80a0234:	fb00 f202 	mul.w	r2, r0, r2
 80a0238:	eb03 0602 	add.w	r6, r3, r2
 80a023c:	88b6      	ldrh	r6, [r6, #4]
 80a023e:	589a      	ldr	r2, [r3, r2]
 80a0240:	8356      	strh	r6, [r2, #26]
 80a0242:	d2d9      	bcs.n	80a01f8 <_ZN4RFID11readMFRC522Eh+0x20>
 80a0244:	201c      	movs	r0, #28
 80a0246:	4606      	mov	r6, r0
 80a0248:	2208      	movs	r2, #8
 80a024a:	2500      	movs	r5, #0
 80a024c:	7b21      	ldrb	r1, [r4, #12]
    else
      pinResetFast(_mosiPin); // Data Low
		
    pinSetFast(_clockPin); // Clock High

    b <<= 1;
 80a024e:	006d      	lsls	r5, r5, #1
 80a0250:	4341      	muls	r1, r0
 80a0252:	185f      	adds	r7, r3, r1
 80a0254:	88bf      	ldrh	r7, [r7, #4]
 80a0256:	5859      	ldr	r1, [r3, r1]
 80a0258:	b2ed      	uxtb	r5, r5
 80a025a:	834f      	strh	r7, [r1, #26]
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

inline void pinSetFast(pin_t _pin)
{
    PIN_MAP[_pin].gpio_peripheral->BSRRL = PIN_MAP[_pin].gpio_pin;
 80a025c:	7ba1      	ldrb	r1, [r4, #14]
 80a025e:	3a01      	subs	r2, #1
 80a0260:	4341      	muls	r1, r0
 80a0262:	185f      	adds	r7, r3, r1
 80a0264:	88bf      	ldrh	r7, [r7, #4]
 80a0266:	5859      	ldr	r1, [r3, r1]
 80a0268:	830f      	strh	r7, [r1, #24]
    PIN_MAP[_pin].gpio_peripheral->BSRRH = PIN_MAP[_pin].gpio_pin;
}

inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
 80a026a:	7b61      	ldrb	r1, [r4, #13]
 80a026c:	4341      	muls	r1, r0
 80a026e:	185f      	adds	r7, r3, r1
 80a0270:	5859      	ldr	r1, [r3, r1]
    if (pinReadFast(_misoPin))
 80a0272:	88bf      	ldrh	r7, [r7, #4]
 80a0274:	6909      	ldr	r1, [r1, #16]
 80a0276:	420f      	tst	r7, r1
    PIN_MAP[_pin].gpio_peripheral->BSRRL = PIN_MAP[_pin].gpio_pin;
}

inline void pinResetFast(pin_t _pin)
{
    PIN_MAP[_pin].gpio_peripheral->BSRRH = PIN_MAP[_pin].gpio_pin;
 80a0278:	7ba1      	ldrb	r1, [r4, #14]
      b |= 1;
 80a027a:	bf18      	it	ne
 80a027c:	f045 0501 	orrne.w	r5, r5, #1
 80a0280:	4371      	muls	r1, r6
 80a0282:	185f      	adds	r7, r3, r1
 80a0284:	88bf      	ldrh	r7, [r7, #4]
 80a0286:	5859      	ldr	r1, [r3, r1]
inline __attribute__((always_inline))
uint8_t RFID::softSPITranser(uint8_t data) {

  uint8_t b=0;

  for (uint8_t bit = 0; bit < 8; bit++) {
 80a0288:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 80a028c:	834f      	strh	r7, [r1, #26]
 80a028e:	d1dd      	bne.n	80a024c <_ZN4RFID11readMFRC522Eh+0x74>
#else	
    SPI.transfer(((addr<<1)&0x7E) | 0x80);	
    val = SPI.transfer(0x00);
#endif

    digitalWrite(_chipSelectPin, HIGH);
 80a0290:	7aa0      	ldrb	r0, [r4, #10]
 80a0292:	2101      	movs	r1, #1
 80a0294:	f001 f8c7 	bl	80a1426 <digitalWrite>
    return val;	
}
 80a0298:	4628      	mov	r0, r5
 80a029a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a029c:	2000006c 	.word	0x2000006c

080a02a0 <_ZN4RFID10setBitMaskEhh>:
	}
}


void RFID::setBitMask(uint8_t reg, uint8_t mask)  
{ 
 80a02a0:	b570      	push	{r4, r5, r6, lr}
 80a02a2:	4605      	mov	r5, r0
 80a02a4:	460e      	mov	r6, r1
 80a02a6:	4614      	mov	r4, r2
    uint8_t tmp;
    tmp = readMFRC522(reg);
 80a02a8:	f7ff ff96 	bl	80a01d8 <_ZN4RFID11readMFRC522Eh>
    writeMFRC522(reg, tmp | mask);  // set bit mask
 80a02ac:	ea40 0204 	orr.w	r2, r0, r4
 80a02b0:	4631      	mov	r1, r6
 80a02b2:	4628      	mov	r0, r5
}
 80a02b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

void RFID::setBitMask(uint8_t reg, uint8_t mask)  
{ 
    uint8_t tmp;
    tmp = readMFRC522(reg);
    writeMFRC522(reg, tmp | mask);  // set bit mask
 80a02b8:	b2d2      	uxtb	r2, r2
 80a02ba:	f7ff bf23 	b.w	80a0104 <_ZN4RFID12writeMFRC522Ehh>

080a02be <_ZN4RFID9antennaOnEv>:
    return val;	
}


void RFID::antennaOn(void)
{
 80a02be:	b510      	push	{r4, lr}
	uint8_t temp;

	temp = readMFRC522(TxControlReg);
 80a02c0:	2114      	movs	r1, #20
    return val;	
}


void RFID::antennaOn(void)
{
 80a02c2:	4604      	mov	r4, r0
	uint8_t temp;

	temp = readMFRC522(TxControlReg);
 80a02c4:	f7ff ff88 	bl	80a01d8 <_ZN4RFID11readMFRC522Eh>
	if (!(temp & 0x03))
 80a02c8:	0783      	lsls	r3, r0, #30
 80a02ca:	d106      	bne.n	80a02da <_ZN4RFID9antennaOnEv+0x1c>
	{
		setBitMask(TxControlReg, 0x03);
 80a02cc:	4620      	mov	r0, r4
	}
}
 80a02ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	uint8_t temp;

	temp = readMFRC522(TxControlReg);
	if (!(temp & 0x03))
	{
		setBitMask(TxControlReg, 0x03);
 80a02d2:	2203      	movs	r2, #3
 80a02d4:	2114      	movs	r1, #20
 80a02d6:	f7ff bfe3 	b.w	80a02a0 <_ZN4RFID10setBitMaskEhh>
 80a02da:	bd10      	pop	{r4, pc}

080a02dc <_ZN4RFID4initEv>:
/******************************************************************************
 * Dr.Leong   ( WWW.B2CQSHOP.COM )
 ******************************************************************************/

void RFID::init()
{
 80a02dc:	b510      	push	{r4, lr}
 80a02de:	4604      	mov	r4, r0
    digitalWrite(_NRSTPD,HIGH);
 80a02e0:	2101      	movs	r1, #1
 80a02e2:	7ac0      	ldrb	r0, [r0, #11]
 80a02e4:	f001 f89f 	bl	80a1426 <digitalWrite>

	reset();
 80a02e8:	4620      	mov	r0, r4
 80a02ea:	f7ff ff71 	bl	80a01d0 <_ZN4RFID5resetEv>

	//Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
    writeMFRC522(TModeReg, 0x8D);		//Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 80a02ee:	4620      	mov	r0, r4
 80a02f0:	228d      	movs	r2, #141	; 0x8d
 80a02f2:	212a      	movs	r1, #42	; 0x2a
 80a02f4:	f7ff ff06 	bl	80a0104 <_ZN4RFID12writeMFRC522Ehh>
    writeMFRC522(TPrescalerReg, 0x3E);	//TModeReg[3..0] + TPrescalerReg
 80a02f8:	4620      	mov	r0, r4
 80a02fa:	223e      	movs	r2, #62	; 0x3e
 80a02fc:	212b      	movs	r1, #43	; 0x2b
 80a02fe:	f7ff ff01 	bl	80a0104 <_ZN4RFID12writeMFRC522Ehh>
    writeMFRC522(TReloadRegL, 30);           
 80a0302:	4620      	mov	r0, r4
 80a0304:	221e      	movs	r2, #30
 80a0306:	212d      	movs	r1, #45	; 0x2d
 80a0308:	f7ff fefc 	bl	80a0104 <_ZN4RFID12writeMFRC522Ehh>
    writeMFRC522(TReloadRegH, 0);
 80a030c:	4620      	mov	r0, r4
 80a030e:	2200      	movs	r2, #0
 80a0310:	212c      	movs	r1, #44	; 0x2c
 80a0312:	f7ff fef7 	bl	80a0104 <_ZN4RFID12writeMFRC522Ehh>

	writeMFRC522(TxAutoReg, 0x40);		//100%ASK
 80a0316:	4620      	mov	r0, r4
 80a0318:	2240      	movs	r2, #64	; 0x40
 80a031a:	2115      	movs	r1, #21
 80a031c:	f7ff fef2 	bl	80a0104 <_ZN4RFID12writeMFRC522Ehh>
	writeMFRC522(ModeReg, 0x3D);		// CRC valor inicial de 0x6363
 80a0320:	4620      	mov	r0, r4
 80a0322:	223d      	movs	r2, #61	; 0x3d
 80a0324:	2111      	movs	r1, #17
 80a0326:	f7ff feed 	bl	80a0104 <_ZN4RFID12writeMFRC522Ehh>

	//ClearBitMask(Status2Reg, 0x08);	//MFCrypto1On=0
	//writeMFRC522(RxSelReg, 0x86);		//RxWait = RxSelReg[5..0]
	//writeMFRC522(RFCfgReg, 0x7F);   	//RxGain = 48dB

	antennaOn();		//Abre  la antena
 80a032a:	4620      	mov	r0, r4


}
 80a032c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

	//ClearBitMask(Status2Reg, 0x08);	//MFCrypto1On=0
	//writeMFRC522(RxSelReg, 0x86);		//RxWait = RxSelReg[5..0]
	//writeMFRC522(RFCfgReg, 0x7F);   	//RxGain = 48dB

	antennaOn();		//Abre  la antena
 80a0330:	f7ff bfc5 	b.w	80a02be <_ZN4RFID9antennaOnEv>

080a0334 <_ZN4RFID12clearBitMaskEhh>:
    tmp = readMFRC522(reg);
    writeMFRC522(reg, tmp | mask);  // set bit mask
}

void RFID::clearBitMask(uint8_t reg, uint8_t mask)  
{
 80a0334:	b570      	push	{r4, r5, r6, lr}
 80a0336:	4605      	mov	r5, r0
 80a0338:	460e      	mov	r6, r1
 80a033a:	4614      	mov	r4, r2
    uint8_t tmp;
    tmp = readMFRC522(reg);
 80a033c:	f7ff ff4c 	bl	80a01d8 <_ZN4RFID11readMFRC522Eh>
    writeMFRC522(reg, tmp & (~mask));  // clear bit mask
 80a0340:	ea20 0204 	bic.w	r2, r0, r4
 80a0344:	4631      	mov	r1, r6
 80a0346:	4628      	mov	r0, r5
} 
 80a0348:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

void RFID::clearBitMask(uint8_t reg, uint8_t mask)  
{
    uint8_t tmp;
    tmp = readMFRC522(reg);
    writeMFRC522(reg, tmp & (~mask));  // clear bit mask
 80a034c:	b2d2      	uxtb	r2, r2
 80a034e:	f7ff bed9 	b.w	80a0104 <_ZN4RFID12writeMFRC522Ehh>

080a0352 <_ZN4RFID13MFRC522ToCardEhPhhS0_Pt>:
    pOutData[0] = readMFRC522(CRCResultRegL);
    pOutData[1] = readMFRC522(CRCResultRegM);
}

uint8_t RFID::MFRC522ToCard(uint8_t command, uint8_t *sendData, uint8_t sendLen, uint8_t *backData, uint16_t *backLen)
{
 80a0352:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint8_t waitIRq = 0x00;
	uint8_t lastBits;
    uint8_t n;
    uint16_t i;

    switch (command)
 80a0356:	290c      	cmp	r1, #12
    pOutData[0] = readMFRC522(CRCResultRegL);
    pOutData[1] = readMFRC522(CRCResultRegM);
}

uint8_t RFID::MFRC522ToCard(uint8_t command, uint8_t *sendData, uint8_t sendLen, uint8_t *backData, uint16_t *backLen)
{
 80a0358:	4604      	mov	r4, r0
 80a035a:	460f      	mov	r7, r1
 80a035c:	4693      	mov	fp, r2
 80a035e:	4698      	mov	r8, r3
 80a0360:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
    uint8_t waitIRq = 0x00;
	uint8_t lastBits;
    uint8_t n;
    uint16_t i;

    switch (command)
 80a0364:	d005      	beq.n	80a0372 <_ZN4RFID13MFRC522ToCardEhPhhS0_Pt+0x20>
 80a0366:	290e      	cmp	r1, #14
 80a0368:	d007      	beq.n	80a037a <_ZN4RFID13MFRC522ToCardEhPhhS0_Pt+0x28>

uint8_t RFID::MFRC522ToCard(uint8_t command, uint8_t *sendData, uint8_t sendLen, uint8_t *backData, uint16_t *backLen)
{
    uint8_t status = MI_ERR;
    uint8_t irqEn = 0x00;
    uint8_t waitIRq = 0x00;
 80a036a:	f04f 0a00 	mov.w	sl, #0
}

uint8_t RFID::MFRC522ToCard(uint8_t command, uint8_t *sendData, uint8_t sendLen, uint8_t *backData, uint16_t *backLen)
{
    uint8_t status = MI_ERR;
    uint8_t irqEn = 0x00;
 80a036e:	4655      	mov	r5, sl
 80a0370:	e006      	b.n	80a0380 <_ZN4RFID13MFRC522ToCardEhPhhS0_Pt+0x2e>
			break;
		}
		case PCD_TRANSCEIVE:	//La transmisiÃƒÂ³n de datos FIFO
		{
			irqEn = 0x77;
			waitIRq = 0x30;
 80a0372:	f04f 0a30 	mov.w	sl, #48	; 0x30
			waitIRq = 0x10;
			break;
		}
		case PCD_TRANSCEIVE:	//La transmisiÃƒÂ³n de datos FIFO
		{
			irqEn = 0x77;
 80a0376:	2577      	movs	r5, #119	; 0x77
			waitIRq = 0x30;
			break;
 80a0378:	e002      	b.n	80a0380 <_ZN4RFID13MFRC522ToCardEhPhhS0_Pt+0x2e>
    switch (command)
    {
        case PCD_AUTHENT:		// Tarjetas de certificaciÃƒÂ³n cerca
		{
			irqEn = 0x12;
			waitIRq = 0x10;
 80a037a:	f04f 0a10 	mov.w	sl, #16

    switch (command)
    {
        case PCD_AUTHENT:		// Tarjetas de certificaciÃƒÂ³n cerca
		{
			irqEn = 0x12;
 80a037e:	2512      	movs	r5, #18
		}
		default:
			break;
    }

    writeMFRC522(CommIEnReg, irqEn|0x80);	//De solicitud de interrupciÃƒÂ³n
 80a0380:	f045 0280 	orr.w	r2, r5, #128	; 0x80
 80a0384:	2102      	movs	r1, #2
 80a0386:	4620      	mov	r0, r4
 80a0388:	f7ff febc 	bl	80a0104 <_ZN4RFID12writeMFRC522Ehh>
    clearBitMask(CommIrqReg, 0x80);			// Borrar todos los bits de peticiÃƒÂ³n de interrupciÃƒÂ³n
 80a038c:	2280      	movs	r2, #128	; 0x80
 80a038e:	2104      	movs	r1, #4
 80a0390:	4620      	mov	r0, r4
 80a0392:	f7ff ffcf 	bl	80a0334 <_ZN4RFID12clearBitMaskEhh>
    setBitMask(FIFOLevelReg, 0x80);			//FlushBuffer=1, FIFO de inicializaciÃƒÂ³n
 80a0396:	2280      	movs	r2, #128	; 0x80
 80a0398:	210a      	movs	r1, #10
 80a039a:	4620      	mov	r0, r4
 80a039c:	f7ff ff80 	bl	80a02a0 <_ZN4RFID10setBitMaskEhh>

	writeMFRC522(CommandReg, PCD_IDLE);	//NO action;Y cancelar el comando
 80a03a0:	2200      	movs	r2, #0
 80a03a2:	2101      	movs	r1, #1
 80a03a4:	4620      	mov	r0, r4
 80a03a6:	f7ff fead 	bl	80a0104 <_ZN4RFID12writeMFRC522Ehh>
 80a03aa:	465e      	mov	r6, fp

	//Escribir datos en el FIFO
    for (i=0; i<sendLen; i++)
 80a03ac:	fa1f f888 	uxth.w	r8, r8
 80a03b0:	ebcb 0206 	rsb	r2, fp, r6
 80a03b4:	b292      	uxth	r2, r2
 80a03b6:	4590      	cmp	r8, r2
 80a03b8:	d906      	bls.n	80a03c8 <_ZN4RFID13MFRC522ToCardEhPhhS0_Pt+0x76>
    {   
		writeMFRC522(FIFODataReg, sendData[i]);    
 80a03ba:	f816 2b01 	ldrb.w	r2, [r6], #1
 80a03be:	2109      	movs	r1, #9
 80a03c0:	4620      	mov	r0, r4
 80a03c2:	f7ff fe9f 	bl	80a0104 <_ZN4RFID12writeMFRC522Ehh>
    setBitMask(FIFOLevelReg, 0x80);			//FlushBuffer=1, FIFO de inicializaciÃƒÂ³n

	writeMFRC522(CommandReg, PCD_IDLE);	//NO action;Y cancelar el comando

	//Escribir datos en el FIFO
    for (i=0; i<sendLen; i++)
 80a03c6:	e7f3      	b.n	80a03b0 <_ZN4RFID13MFRC522ToCardEhPhhS0_Pt+0x5e>
    {   
		writeMFRC522(FIFODataReg, sendData[i]);    
	}

	//???? ejecutar el comando
	writeMFRC522(CommandReg, command);
 80a03c8:	463a      	mov	r2, r7
 80a03ca:	2101      	movs	r1, #1
 80a03cc:	4620      	mov	r0, r4
 80a03ce:	f7ff fe99 	bl	80a0104 <_ZN4RFID12writeMFRC522Ehh>
    if (command == PCD_TRANSCEIVE)
 80a03d2:	2f0c      	cmp	r7, #12
 80a03d4:	d104      	bne.n	80a03e0 <_ZN4RFID13MFRC522ToCardEhPhhS0_Pt+0x8e>
    {    
		setBitMask(BitFramingReg, 0x80);		//StartSend=1,transmission of data starts  
 80a03d6:	2280      	movs	r2, #128	; 0x80
 80a03d8:	210d      	movs	r1, #13
 80a03da:	4620      	mov	r0, r4
 80a03dc:	f7ff ff60 	bl	80a02a0 <_ZN4RFID10setBitMaskEhh>

    writeMFRC522(CommIEnReg, irqEn|0x80);	//De solicitud de interrupciÃƒÂ³n
    clearBitMask(CommIrqReg, 0x80);			// Borrar todos los bits de peticiÃƒÂ³n de interrupciÃƒÂ³n
    setBitMask(FIFOLevelReg, 0x80);			//FlushBuffer=1, FIFO de inicializaciÃƒÂ³n

	writeMFRC522(CommandReg, PCD_IDLE);	//NO action;Y cancelar el comando
 80a03e0:	f44f 66fa 	mov.w	r6, #2000	; 0x7d0
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = readMFRC522(CommIrqReg);
        i--;
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 80a03e4:	f04a 0b01 	orr.w	fp, sl, #1
	i = 2000;	//i????????,??M1???????25ms	??? i De acuerdo con el ajuste de frecuencia de reloj, el tiempo mÃƒÂ¡ximo de espera operaciÃƒÂ³n M1 25ms tarjeta??
    do 
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = readMFRC522(CommIrqReg);
 80a03e8:	2104      	movs	r1, #4
 80a03ea:	4620      	mov	r0, r4
 80a03ec:	f7ff fef4 	bl	80a01d8 <_ZN4RFID11readMFRC522Eh>
        i--;
 80a03f0:	3e01      	subs	r6, #1
 80a03f2:	b2b6      	uxth	r6, r6
	i = 2000;	//i????????,??M1???????25ms	??? i De acuerdo con el ajuste de frecuencia de reloj, el tiempo mÃƒÂ¡ximo de espera operaciÃƒÂ³n M1 25ms tarjeta??
    do 
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = readMFRC522(CommIrqReg);
 80a03f4:	4682      	mov	sl, r0
        i--;
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 80a03f6:	b116      	cbz	r6, 80a03fe <_ZN4RFID13MFRC522ToCardEhPhhS0_Pt+0xac>
 80a03f8:	ea10 0f0b 	tst.w	r0, fp
 80a03fc:	d0f4      	beq.n	80a03e8 <_ZN4RFID13MFRC522ToCardEhPhhS0_Pt+0x96>

    clearBitMask(BitFramingReg, 0x80);			//StartSend=0
 80a03fe:	2280      	movs	r2, #128	; 0x80
 80a0400:	210d      	movs	r1, #13
 80a0402:	4620      	mov	r0, r4
 80a0404:	f7ff ff96 	bl	80a0334 <_ZN4RFID12clearBitMaskEhh>

    if (i != 0)
 80a0408:	b3b6      	cbz	r6, 80a0478 <_ZN4RFID13MFRC522ToCardEhPhhS0_Pt+0x126>
    {    
        if(!(readMFRC522(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
 80a040a:	2106      	movs	r1, #6
 80a040c:	4620      	mov	r0, r4
 80a040e:	f7ff fee3 	bl	80a01d8 <_ZN4RFID11readMFRC522Eh>
 80a0412:	f010 0f1b 	tst.w	r0, #27
 80a0416:	d12f      	bne.n	80a0478 <_ZN4RFID13MFRC522ToCardEhPhhS0_Pt+0x126>
 80a0418:	f005 0501 	and.w	r5, r5, #1
            if (n & irqEn & 0x01)
            {   
				status = MI_NOTAGERR;			//??   
			}

            if (command == PCD_TRANSCEIVE)
 80a041c:	2f0c      	cmp	r7, #12
 80a041e:	ea0a 0605 	and.w	r6, sl, r5
 80a0422:	d12a      	bne.n	80a047a <_ZN4RFID13MFRC522ToCardEhPhhS0_Pt+0x128>
            {
               	n = readMFRC522(FIFOLevelReg);
 80a0424:	210a      	movs	r1, #10
 80a0426:	4620      	mov	r0, r4
 80a0428:	f7ff fed6 	bl	80a01d8 <_ZN4RFID11readMFRC522Eh>
              	lastBits = readMFRC522(ControlReg) & 0x07;
 80a042c:	4639      	mov	r1, r7
				status = MI_NOTAGERR;			//??   
			}

            if (command == PCD_TRANSCEIVE)
            {
               	n = readMFRC522(FIFOLevelReg);
 80a042e:	4605      	mov	r5, r0
              	lastBits = readMFRC522(ControlReg) & 0x07;
 80a0430:	4620      	mov	r0, r4
 80a0432:	f7ff fed1 	bl	80a01d8 <_ZN4RFID11readMFRC522Eh>
                if (lastBits)
 80a0436:	f010 0007 	ands.w	r0, r0, #7
                {   
					*backLen = (n-1)*8 + lastBits;   
 80a043a:	bf1b      	ittet	ne
 80a043c:	f105 33ff 	addne.w	r3, r5, #4294967295	; 0xffffffff
 80a0440:	eb00 00c3 	addne.w	r0, r0, r3, lsl #3
				}
                else
                {   
					*backLen = n*8;   
 80a0444:	00eb      	lsleq	r3, r5, #3
            {
               	n = readMFRC522(FIFOLevelReg);
              	lastBits = readMFRC522(ControlReg) & 0x07;
                if (lastBits)
                {   
					*backLen = (n-1)*8 + lastBits;   
 80a0446:	f8a9 0000 	strhne.w	r0, [r9]
				}
                else
                {   
					*backLen = n*8;   
 80a044a:	bf08      	it	eq
 80a044c:	f8a9 3000 	strheq.w	r3, [r9]
				}

                if (n == 0)
 80a0450:	b11d      	cbz	r5, 80a045a <_ZN4RFID13MFRC522ToCardEhPhhS0_Pt+0x108>
                {   
					n = 1;    
				}
                if (n > MAX_LEN)
                {   
					n = MAX_LEN;   
 80a0452:	2d11      	cmp	r5, #17
 80a0454:	bf28      	it	cs
 80a0456:	2510      	movcs	r5, #16
 80a0458:	e000      	b.n	80a045c <_ZN4RFID13MFRC522ToCardEhPhhS0_Pt+0x10a>
					*backLen = n*8;   
				}

                if (n == 0)
                {   
					n = 1;    
 80a045a:	2501      	movs	r5, #1
				}
                if (n > MAX_LEN)
                {   
					n = MAX_LEN;   
 80a045c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
				}

				//??FIFO??????? Lea los datos recibidos en el FIFO
                for (i=0; i<n; i++)
 80a045e:	b2ad      	uxth	r5, r5
 80a0460:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a0462:	1afb      	subs	r3, r7, r3
 80a0464:	b29b      	uxth	r3, r3
 80a0466:	429d      	cmp	r5, r3
 80a0468:	d907      	bls.n	80a047a <_ZN4RFID13MFRC522ToCardEhPhhS0_Pt+0x128>
                {   
					backData[i] = readMFRC522(FIFODataReg);    
 80a046a:	2109      	movs	r1, #9
 80a046c:	4620      	mov	r0, r4
 80a046e:	f7ff feb3 	bl	80a01d8 <_ZN4RFID11readMFRC522Eh>
 80a0472:	f807 0b01 	strb.w	r0, [r7], #1
                {   
					n = MAX_LEN;   
				}

				//??FIFO??????? Lea los datos recibidos en el FIFO
                for (i=0; i<n; i++)
 80a0476:	e7f3      	b.n	80a0460 <_ZN4RFID13MFRC522ToCardEhPhhS0_Pt+0x10e>
    pOutData[1] = readMFRC522(CRCResultRegM);
}

uint8_t RFID::MFRC522ToCard(uint8_t command, uint8_t *sendData, uint8_t sendLen, uint8_t *backData, uint16_t *backLen)
{
    uint8_t status = MI_ERR;
 80a0478:	2602      	movs	r6, #2

    //SetBitMask(ControlReg,0x80);           //timer stops
    //Write_MFRC522(CommandReg, PCD_IDLE); 

    return status;
}
 80a047a:	4630      	mov	r0, r6
 80a047c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a0480 <_ZN4RFID14MFRC522RequestEhPh>:
 *				0x0800 = Mifare_Pro(X)
 *				0x4403 = Mifare_DESFire
 *  Valor de retorno: el retorno exitoso MI_OK
 */
uint8_t  RFID::MFRC522Request(uint8_t reqMode, uint8_t *TagType)
{
 80a0480:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80a0482:	4614      	mov	r4, r2
 80a0484:	4605      	mov	r5, r0
 80a0486:	460e      	mov	r6, r1
	uint8_t status;  
	uint16_t backBits;			//   RecibiÃƒÂ³ bits de datos

	writeMFRC522(BitFramingReg, 0x07);		//TxLastBists = BitFramingReg[2..0]	???
 80a0488:	2207      	movs	r2, #7
 80a048a:	210d      	movs	r1, #13
 80a048c:	f7ff fe3a 	bl	80a0104 <_ZN4RFID12writeMFRC522Ehh>

	TagType[0] = reqMode;
	status = MFRC522ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 80a0490:	f10d 030e 	add.w	r3, sp, #14
 80a0494:	9301      	str	r3, [sp, #4]
	uint8_t status;  
	uint16_t backBits;			//   RecibiÃƒÂ³ bits de datos

	writeMFRC522(BitFramingReg, 0x07);		//TxLastBists = BitFramingReg[2..0]	???

	TagType[0] = reqMode;
 80a0496:	7026      	strb	r6, [r4, #0]
	status = MFRC522ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 80a0498:	9400      	str	r4, [sp, #0]
 80a049a:	2301      	movs	r3, #1
 80a049c:	4622      	mov	r2, r4
 80a049e:	210c      	movs	r1, #12
 80a04a0:	4628      	mov	r0, r5
 80a04a2:	f7ff ff56 	bl	80a0352 <_ZN4RFID13MFRC522ToCardEhPhhS0_Pt>

	if ((status != MI_OK) || (backBits != 0x10))
 80a04a6:	b928      	cbnz	r0, 80a04b4 <_ZN4RFID14MFRC522RequestEhPh+0x34>
 80a04a8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80a04ac:	2b10      	cmp	r3, #16
	{    
		status = MI_ERR;
 80a04ae:	bf18      	it	ne
 80a04b0:	2002      	movne	r0, #2
 80a04b2:	e000      	b.n	80a04b6 <_ZN4RFID14MFRC522RequestEhPh+0x36>
 80a04b4:	2002      	movs	r0, #2
	}

	return status;
}
 80a04b6:	b004      	add	sp, #16
 80a04b8:	bd70      	pop	{r4, r5, r6, pc}

080a04ba <_ZN4RFID6isCardEv>:
/******************************************************************************
 * User API
 ******************************************************************************/

 bool RFID::isCard() 
 {
 80a04ba:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t status;
	uint8_t str[MAX_LEN];

	status = MFRC522Request(PICC_REQIDL, str);	
 80a04bc:	2126      	movs	r1, #38	; 0x26
 80a04be:	466a      	mov	r2, sp
 80a04c0:	f7ff ffde 	bl	80a0480 <_ZN4RFID14MFRC522RequestEhPh>
    if (status == MI_OK) {
		return true;
	} else { 
		return false; 
	}
 }
 80a04c4:	fab0 f080 	clz	r0, r0
 80a04c8:	0940      	lsrs	r0, r0, #5
 80a04ca:	b005      	add	sp, #20
 80a04cc:	f85d fb04 	ldr.w	pc, [sp], #4

080a04d0 <_ZN4RFID8anticollEPh>:
 *  Anti-detecciÃƒÂ³n de colisiones, la lectura del nÃƒÂºmero de serie de la tarjeta de tarjeta
 *  @param serNum - devuelve el nÃƒÂºmero de tarjeta 4 bytes de serie, los primeros 5 bytes de bytes de paridad
 *  @return retorno exitoso MI_OK
 */
uint8_t RFID::anticoll(uint8_t *serNum)
{
 80a04d0:	b530      	push	{r4, r5, lr}
 80a04d2:	460c      	mov	r4, r1
 80a04d4:	4605      	mov	r5, r0
 80a04d6:	b085      	sub	sp, #20
    uint16_t unLen;


    //ClearBitMask(Status2Reg, 0x08);		//TempSensclear
    //ClearBitMask(CollReg,0x80);			//ValuesAfterColl
	writeMFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 80a04d8:	2200      	movs	r2, #0
 80a04da:	210d      	movs	r1, #13
 80a04dc:	f7ff fe12 	bl	80a0104 <_ZN4RFID12writeMFRC522Ehh>

    serNum[0] = PICC_ANTICOLL;
 80a04e0:	2393      	movs	r3, #147	; 0x93
 80a04e2:	7023      	strb	r3, [r4, #0]
    serNum[1] = 0x20;
 80a04e4:	2320      	movs	r3, #32
 80a04e6:	7063      	strb	r3, [r4, #1]
    status = MFRC522ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 80a04e8:	f10d 030e 	add.w	r3, sp, #14
 80a04ec:	9301      	str	r3, [sp, #4]
 80a04ee:	9400      	str	r4, [sp, #0]
 80a04f0:	2302      	movs	r3, #2
 80a04f2:	4622      	mov	r2, r4
 80a04f4:	210c      	movs	r1, #12
 80a04f6:	4628      	mov	r0, r5
 80a04f8:	f7ff ff2b 	bl	80a0352 <_ZN4RFID13MFRC522ToCardEhPhhS0_Pt>

    if (status == MI_OK)
 80a04fc:	b960      	cbnz	r0, 80a0518 <_ZN4RFID8anticollEPh+0x48>
 80a04fe:	1e63      	subs	r3, r4, #1
 80a0500:	1ce2      	adds	r2, r4, #3
	{
		//?????? Compruebe el nÃƒÂºmero de serie de la tarjeta
		for (i=0; i<4; i++)
		{   
		 	serNumCheck ^= serNum[i];
 80a0502:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80a0506:	4048      	eors	r0, r1
    status = MFRC522ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);

    if (status == MI_OK)
	{
		//?????? Compruebe el nÃƒÂºmero de serie de la tarjeta
		for (i=0; i<4; i++)
 80a0508:	4293      	cmp	r3, r2
		{   
		 	serNumCheck ^= serNum[i];
 80a050a:	b2c0      	uxtb	r0, r0
    status = MFRC522ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);

    if (status == MI_OK)
	{
		//?????? Compruebe el nÃƒÂºmero de serie de la tarjeta
		for (i=0; i<4; i++)
 80a050c:	d1f9      	bne.n	80a0502 <_ZN4RFID8anticollEPh+0x32>
		{   
		 	serNumCheck ^= serNum[i];
		}
		if (serNumCheck != serNum[i])
 80a050e:	7923      	ldrb	r3, [r4, #4]
		{   
			status = MI_ERR;    
 80a0510:	4283      	cmp	r3, r0
 80a0512:	bf14      	ite	ne
 80a0514:	2002      	movne	r0, #2
 80a0516:	2000      	moveq	r0, #0
    }

    //SetBitMask(CollReg, 0x80);		//ValuesAfterColl=1

    return status;
}
 80a0518:	b005      	add	sp, #20
 80a051a:	bd30      	pop	{r4, r5, pc}

080a051c <_ZN4RFID14readCardSerialEv>:
	} else { 
		return false; 
	}
 }

 bool RFID::readCardSerial(){
 80a051c:	b51f      	push	{r0, r1, r2, r3, r4, lr}

	uint8_t status;
	uint8_t str[MAX_LEN];

	// Anti-colisiÃƒÂ³n, devuelva el nÃƒÂºmero de serie de tarjeta de 4 bytes
	status = anticoll(str);
 80a051e:	4669      	mov	r1, sp
	} else { 
		return false; 
	}
 }

 bool RFID::readCardSerial(){
 80a0520:	4604      	mov	r4, r0

	uint8_t status;
	uint8_t str[MAX_LEN];

	// Anti-colisiÃƒÂ³n, devuelva el nÃƒÂºmero de serie de tarjeta de 4 bytes
	status = anticoll(str);
 80a0522:	f7ff ffd5 	bl	80a04d0 <_ZN4RFID8anticollEPh>
 80a0526:	4603      	mov	r3, r0
	memcpy(serNum, str, 5);
 80a0528:	9800      	ldr	r0, [sp, #0]
 80a052a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80a052e:	6020      	str	r0, [r4, #0]
		return true;
	} else {
		return false;
	}

 }
 80a0530:	fab3 f083 	clz	r0, r3
 80a0534:	0940      	lsrs	r0, r0, #5
	uint8_t status;
	uint8_t str[MAX_LEN];

	// Anti-colisiÃƒÂ³n, devuelva el nÃƒÂºmero de serie de tarjeta de 4 bytes
	status = anticoll(str);
	memcpy(serNum, str, 5);
 80a0536:	7122      	strb	r2, [r4, #4]
		return true;
	} else {
		return false;
	}

 }
 80a0538:	b004      	add	sp, #16
 80a053a:	bd10      	pop	{r4, pc}

080a053c <_GLOBAL__sub_I__ZN4RFIDC2Ehh>:

    pinResetFast(_clockPin); // Clock Low
  }
  return b;

 80a053c:	b508      	push	{r3, lr}
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a053e:	f000 f8c9 	bl	80a06d4 <HAL_Pin_Map>
 80a0542:	4b01      	ldr	r3, [pc, #4]	; (80a0548 <_GLOBAL__sub_I__ZN4RFIDC2Ehh+0xc>)
 80a0544:	6018      	str	r0, [r3, #0]
 80a0546:	bd08      	pop	{r3, pc}
 80a0548:	2000006c 	.word	0x2000006c

080a054c <_Z8scanCard6String>:
void loop()
{
}

int scanCard(String Command)
{
 80a054c:	b510      	push	{r4, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 80a054e:	492a      	ldr	r1, [pc, #168]	; (80a05f8 <_Z8scanCard6String+0xac>)
 80a0550:	b088      	sub	sp, #32
 80a0552:	f000 fcba 	bl	80a0eca <_ZNK6String6equalsEPKc>
  if (Command == "1")
 80a0556:	2800      	cmp	r0, #0
 80a0558:	d04b      	beq.n	80a05f2 <_Z8scanCard6String+0xa6>
  {
    digitalWrite(D5, HIGH);
 80a055a:	2101      	movs	r1, #1
 80a055c:	2005      	movs	r0, #5
    Serial.println("TURNING RED ON:");
    // Red Light means card is ready to be scanned.
    /* Has a card been detected? */

    if (RC522.isCard())
 80a055e:	4c27      	ldr	r4, [pc, #156]	; (80a05fc <_Z8scanCard6String+0xb0>)

int scanCard(String Command)
{
  if (Command == "1")
  {
    digitalWrite(D5, HIGH);
 80a0560:	f000 ff61 	bl	80a1426 <digitalWrite>
    Serial.println("TURNING RED ON:");
 80a0564:	f000 fdcc 	bl	80a1100 <_Z16_fetch_usbserialv>
 80a0568:	4925      	ldr	r1, [pc, #148]	; (80a0600 <_Z8scanCard6String+0xb4>)
 80a056a:	f000 fbd0 	bl	80a0d0e <_ZN5Print7printlnEPKc>
    // Red Light means card is ready to be scanned.
    /* Has a card been detected? */

    if (RC522.isCard())
 80a056e:	4620      	mov	r0, r4
 80a0570:	f7ff ffa3 	bl	80a04ba <_ZN4RFID6isCardEv>
 80a0574:	b378      	cbz	r0, 80a05d6 <_Z8scanCard6String+0x8a>
    {
      digitalWrite(D5, LOW);
 80a0576:	2100      	movs	r1, #0
 80a0578:	2005      	movs	r0, #5
 80a057a:	f000 ff54 	bl	80a1426 <digitalWrite>
      Serial.println("ENTERED LOOP:");
 80a057e:	f000 fdbf 	bl	80a1100 <_Z16_fetch_usbserialv>
 80a0582:	4920      	ldr	r1, [pc, #128]	; (80a0604 <_Z8scanCard6String+0xb8>)
 80a0584:	f000 fbc3 	bl	80a0d0e <_ZN5Print7printlnEPKc>

      /* If so then get its serial number */
      RC522.readCardSerial();
 80a0588:	4620      	mov	r0, r4
 80a058a:	f7ff ffc7 	bl	80a051c <_ZN4RFID14readCardSerialEv>
      Serial.println("GREEEN ON:");
 80a058e:	f000 fdb7 	bl	80a1100 <_Z16_fetch_usbserialv>
 80a0592:	491d      	ldr	r1, [pc, #116]	; (80a0608 <_Z8scanCard6String+0xbc>)
 80a0594:	f000 fbbb 	bl	80a0d0e <_ZN5Print7printlnEPKc>

      Serial.println("Card detected:");
 80a0598:	f000 fdb2 	bl	80a1100 <_Z16_fetch_usbserialv>
 80a059c:	491b      	ldr	r1, [pc, #108]	; (80a060c <_Z8scanCard6String+0xc0>)
 80a059e:	f000 fbb6 	bl	80a0d0e <_ZN5Print7printlnEPKc>

      /* Output the serial number to the UART */

      snprintf(cardID, sizeof(cardID), "%02X-%02X-%02X-%02X", RC522.serNum[0], RC522.serNum[1], RC522.serNum[2], RC522.serNum[3]);
 80a05a2:	78e2      	ldrb	r2, [r4, #3]
 80a05a4:	7823      	ldrb	r3, [r4, #0]
 80a05a6:	9202      	str	r2, [sp, #8]
 80a05a8:	78a2      	ldrb	r2, [r4, #2]
 80a05aa:	2110      	movs	r1, #16
 80a05ac:	9201      	str	r2, [sp, #4]
 80a05ae:	7862      	ldrb	r2, [r4, #1]
 80a05b0:	4817      	ldr	r0, [pc, #92]	; (80a0610 <_Z8scanCard6String+0xc4>)
 80a05b2:	9200      	str	r2, [sp, #0]
 80a05b4:	4a17      	ldr	r2, [pc, #92]	; (80a0614 <_Z8scanCard6String+0xc8>)
 80a05b6:	f000 fa1b 	bl	80a09f0 <snprintf>

      Serial.print(cardID);
 80a05ba:	f000 fda1 	bl	80a1100 <_Z16_fetch_usbserialv>
 80a05be:	4914      	ldr	r1, [pc, #80]	; (80a0610 <_Z8scanCard6String+0xc4>)
 80a05c0:	f000 fb92 	bl	80a0ce8 <_ZN5Print5printEPKc>
      Serial.println();
 80a05c4:	f000 fd9c 	bl	80a1100 <_Z16_fetch_usbserialv>
 80a05c8:	f000 fb95 	bl	80a0cf6 <_ZN5Print7printlnEv>
      digitalWrite(D4, HIGH);
 80a05cc:	2101      	movs	r1, #1
 80a05ce:	2004      	movs	r0, #4
 80a05d0:	f000 ff29 	bl	80a1426 <digitalWrite>
 80a05d4:	e00d      	b.n	80a05f2 <_Z8scanCard6String+0xa6>
    }
    else
    {
      delay(1000);
 80a05d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a05da:	f000 fa11 	bl	80a0a00 <delay>
      scanCard("1");
 80a05de:	4906      	ldr	r1, [pc, #24]	; (80a05f8 <_Z8scanCard6String+0xac>)
 80a05e0:	a804      	add	r0, sp, #16
 80a05e2:	f000 fc45 	bl	80a0e70 <_ZN6StringC1EPK19__FlashStringHelper>
 80a05e6:	a804      	add	r0, sp, #16
 80a05e8:	f7ff ffb0 	bl	80a054c <_Z8scanCard6String>
 80a05ec:	a804      	add	r0, sp, #16
 80a05ee:	f000 fbf8 	bl	80a0de2 <_ZN6StringD1Ev>
    }
  }
 80a05f2:	b008      	add	sp, #32
 80a05f4:	bd10      	pop	{r4, pc}
 80a05f6:	bf00      	nop
 80a05f8:	080a1925 	.word	0x080a1925
 80a05fc:	20000080 	.word	0x20000080
 80a0600:	080a1878 	.word	0x080a1878
 80a0604:	080a1888 	.word	0x080a1888
 80a0608:	080a1896 	.word	0x080a1896
 80a060c:	080a18a1 	.word	0x080a18a1
 80a0610:	20000070 	.word	0x20000070
 80a0614:	080a18b0 	.word	0x080a18b0

080a0618 <setup>:

char cardID[16];
// Variables related to program

void setup()
{
 80a0618:	b508      	push	{r3, lr}
  pinMode(D4, OUTPUT);
 80a061a:	2101      	movs	r1, #1
 80a061c:	2004      	movs	r0, #4
 80a061e:	f000 fef1 	bl	80a1404 <pinMode>
  pinMode(D5, OUTPUT);
 80a0622:	2101      	movs	r1, #1
 80a0624:	2005      	movs	r0, #5
 80a0626:	f000 feed 	bl	80a1404 <pinMode>
  Serial.begin(9600);
 80a062a:	f000 fd69 	bl	80a1100 <_Z16_fetch_usbserialv>
 80a062e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a0632:	f000 fd4b 	bl	80a10cc <_ZN9USBSerial5beginEl>
  SPI.setClockDivider(SPI_CLOCK_DIV8);
  SPI.begin();
#endif

  /* Initialise the RFID reader */
  RC522.init();
 80a0636:	4808      	ldr	r0, [pc, #32]	; (80a0658 <setup+0x40>)
 80a0638:	f7ff fe50 	bl	80a02dc <_ZN4RFID4initEv>
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
 80a063c:	2300      	movs	r3, #0
 80a063e:	2204      	movs	r2, #4
 80a0640:	4906      	ldr	r1, [pc, #24]	; (80a065c <setup+0x44>)
 80a0642:	4807      	ldr	r0, [pc, #28]	; (80a0660 <setup+0x48>)
 80a0644:	f000 f954 	bl	80a08f0 <spark_variable>
  Particle.variable("cardID", cardID);
  Particle.function("scanCard", scanCard);
}
 80a0648:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return CLOUD_FN(register_function(call_raw_user_function, (void*)func, funcKey), false);
 80a064c:	4a05      	ldr	r2, [pc, #20]	; (80a0664 <setup+0x4c>)
 80a064e:	4906      	ldr	r1, [pc, #24]	; (80a0668 <setup+0x50>)
 80a0650:	4806      	ldr	r0, [pc, #24]	; (80a066c <setup+0x54>)
 80a0652:	f000 b9f7 	b.w	80a0a44 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 80a0656:	bf00      	nop
 80a0658:	20000080 	.word	0x20000080
 80a065c:	20000070 	.word	0x20000070
 80a0660:	080a18c4 	.word	0x080a18c4
 80a0664:	080a18cb 	.word	0x080a18cb
 80a0668:	080a054d 	.word	0x080a054d
 80a066c:	080a0a19 	.word	0x080a0a19

080a0670 <loop>:

void loop()
{
 80a0670:	4770      	bx	lr
	...

080a0674 <_GLOBAL__sub_I_RC522>:
    {
      delay(1000);
      scanCard("1");
    }
  }
 80a0674:	b507      	push	{r0, r1, r2, lr}
 80a0676:	f000 f82d 	bl	80a06d4 <HAL_Pin_Map>
#define MISO_PIN A4 //     "     " : A4
#define SCK_PIN A3  //     "     " : A3

/* Create an instance of the RFID library */
#if defined(_USE_SOFT_SPI_)
RFID RC522(SS_PIN, RST_PIN, MOSI_PIN, MISO_PIN, SCK_PIN); // Software SPI
 80a067a:	220e      	movs	r2, #14
 80a067c:	230d      	movs	r3, #13
 80a067e:	e88d 000c 	stmia.w	sp, {r2, r3}
 80a0682:	210c      	movs	r1, #12
 80a0684:	230f      	movs	r3, #15
 80a0686:	2202      	movs	r2, #2
 80a0688:	4802      	ldr	r0, [pc, #8]	; (80a0694 <_GLOBAL__sub_I_RC522+0x20>)
 80a068a:	f7ff fd10 	bl	80a00ae <_ZN4RFIDC1Ehhhhh>
    {
      delay(1000);
      scanCard("1");
    }
  }
 80a068e:	b003      	add	sp, #12
 80a0690:	f85d fb04 	ldr.w	pc, [sp], #4
 80a0694:	20000080 	.word	0x20000080

080a0698 <_GLOBAL__sub_I__ZN7MFRC522C2Ehh>:
 80a0698:	f000 b81c 	b.w	80a06d4 <HAL_Pin_Map>

080a069c <_GLOBAL__sub_I__ZN12Adafruit_GFXC2Ess>:
 80a069c:	f000 b81a 	b.w	80a06d4 <HAL_Pin_Map>

080a06a0 <_GLOBAL__sub_I__ZN16Adafruit_SSD13069drawPixelEsst>:
 80a06a0:	f000 b818 	b.w	80a06d4 <HAL_Pin_Map>

080a06a4 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a06a4:	b508      	push	{r3, lr}
 80a06a6:	4b02      	ldr	r3, [pc, #8]	; (80a06b0 <os_mutex_create+0xc>)
 80a06a8:	681b      	ldr	r3, [r3, #0]
 80a06aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a06ac:	9301      	str	r3, [sp, #4]
 80a06ae:	bd08      	pop	{r3, pc}
 80a06b0:	080601d0 	.word	0x080601d0

080a06b4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a06b4:	b508      	push	{r3, lr}
 80a06b6:	4b02      	ldr	r3, [pc, #8]	; (80a06c0 <HAL_RNG_GetRandomNumber+0xc>)
 80a06b8:	681b      	ldr	r3, [r3, #0]
 80a06ba:	685b      	ldr	r3, [r3, #4]
 80a06bc:	9301      	str	r3, [sp, #4]
 80a06be:	bd08      	pop	{r3, pc}
 80a06c0:	0806019c 	.word	0x0806019c

080a06c4 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a06c4:	b508      	push	{r3, lr}
 80a06c6:	4b02      	ldr	r3, [pc, #8]	; (80a06d0 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a06c8:	681b      	ldr	r3, [r3, #0]
 80a06ca:	695b      	ldr	r3, [r3, #20]
 80a06cc:	9301      	str	r3, [sp, #4]
 80a06ce:	bd08      	pop	{r3, pc}
 80a06d0:	0806019c 	.word	0x0806019c

080a06d4 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a06d4:	b508      	push	{r3, lr}
 80a06d6:	4b02      	ldr	r3, [pc, #8]	; (80a06e0 <HAL_Pin_Map+0xc>)
 80a06d8:	681b      	ldr	r3, [r3, #0]
 80a06da:	681b      	ldr	r3, [r3, #0]
 80a06dc:	9301      	str	r3, [sp, #4]
 80a06de:	bd08      	pop	{r3, pc}
 80a06e0:	080601b0 	.word	0x080601b0

080a06e4 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a06e4:	b508      	push	{r3, lr}
 80a06e6:	4b02      	ldr	r3, [pc, #8]	; (80a06f0 <HAL_Pin_Mode+0xc>)
 80a06e8:	681b      	ldr	r3, [r3, #0]
 80a06ea:	689b      	ldr	r3, [r3, #8]
 80a06ec:	9301      	str	r3, [sp, #4]
 80a06ee:	bd08      	pop	{r3, pc}
 80a06f0:	080601b0 	.word	0x080601b0

080a06f4 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a06f4:	b508      	push	{r3, lr}
 80a06f6:	4b02      	ldr	r3, [pc, #8]	; (80a0700 <HAL_Get_Pin_Mode+0xc>)
 80a06f8:	681b      	ldr	r3, [r3, #0]
 80a06fa:	68db      	ldr	r3, [r3, #12]
 80a06fc:	9301      	str	r3, [sp, #4]
 80a06fe:	bd08      	pop	{r3, pc}
 80a0700:	080601b0 	.word	0x080601b0

080a0704 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a0704:	b508      	push	{r3, lr}
 80a0706:	4b02      	ldr	r3, [pc, #8]	; (80a0710 <HAL_GPIO_Write+0xc>)
 80a0708:	681b      	ldr	r3, [r3, #0]
 80a070a:	691b      	ldr	r3, [r3, #16]
 80a070c:	9301      	str	r3, [sp, #4]
 80a070e:	bd08      	pop	{r3, pc}
 80a0710:	080601b0 	.word	0x080601b0

080a0714 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a0714:	b508      	push	{r3, lr}
 80a0716:	4b02      	ldr	r3, [pc, #8]	; (80a0720 <HAL_I2C_Write_Data+0xc>)
 80a0718:	681b      	ldr	r3, [r3, #0]
 80a071a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a071c:	9301      	str	r3, [sp, #4]
 80a071e:	bd08      	pop	{r3, pc}
 80a0720:	080601ac 	.word	0x080601ac

080a0724 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a0724:	b508      	push	{r3, lr}
 80a0726:	4b02      	ldr	r3, [pc, #8]	; (80a0730 <HAL_I2C_Available_Data+0xc>)
 80a0728:	681b      	ldr	r3, [r3, #0]
 80a072a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a072c:	9301      	str	r3, [sp, #4]
 80a072e:	bd08      	pop	{r3, pc}
 80a0730:	080601ac 	.word	0x080601ac

080a0734 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a0734:	b508      	push	{r3, lr}
 80a0736:	4b02      	ldr	r3, [pc, #8]	; (80a0740 <HAL_I2C_Read_Data+0xc>)
 80a0738:	681b      	ldr	r3, [r3, #0]
 80a073a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a073c:	9301      	str	r3, [sp, #4]
 80a073e:	bd08      	pop	{r3, pc}
 80a0740:	080601ac 	.word	0x080601ac

080a0744 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a0744:	b508      	push	{r3, lr}
 80a0746:	4b02      	ldr	r3, [pc, #8]	; (80a0750 <HAL_I2C_Peek_Data+0xc>)
 80a0748:	681b      	ldr	r3, [r3, #0]
 80a074a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a074c:	9301      	str	r3, [sp, #4]
 80a074e:	bd08      	pop	{r3, pc}
 80a0750:	080601ac 	.word	0x080601ac

080a0754 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a0754:	b508      	push	{r3, lr}
 80a0756:	4b02      	ldr	r3, [pc, #8]	; (80a0760 <HAL_I2C_Flush_Data+0xc>)
 80a0758:	681b      	ldr	r3, [r3, #0]
 80a075a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a075c:	9301      	str	r3, [sp, #4]
 80a075e:	bd08      	pop	{r3, pc}
 80a0760:	080601ac 	.word	0x080601ac

080a0764 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a0764:	b508      	push	{r3, lr}
 80a0766:	4b02      	ldr	r3, [pc, #8]	; (80a0770 <HAL_I2C_Is_Enabled+0xc>)
 80a0768:	681b      	ldr	r3, [r3, #0]
 80a076a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a076c:	9301      	str	r3, [sp, #4]
 80a076e:	bd08      	pop	{r3, pc}
 80a0770:	080601ac 	.word	0x080601ac

080a0774 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a0774:	b508      	push	{r3, lr}
 80a0776:	4b03      	ldr	r3, [pc, #12]	; (80a0784 <HAL_I2C_Init+0x10>)
 80a0778:	681b      	ldr	r3, [r3, #0]
 80a077a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a077e:	9301      	str	r3, [sp, #4]
 80a0780:	bd08      	pop	{r3, pc}
 80a0782:	0000      	.short	0x0000
 80a0784:	080601ac 	.word	0x080601ac

080a0788 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a0788:	b508      	push	{r3, lr}
 80a078a:	4b02      	ldr	r3, [pc, #8]	; (80a0794 <HAL_SPI_Init+0xc>)
 80a078c:	681b      	ldr	r3, [r3, #0]
 80a078e:	69db      	ldr	r3, [r3, #28]
 80a0790:	9301      	str	r3, [sp, #4]
 80a0792:	bd08      	pop	{r3, pc}
 80a0794:	080601b4 	.word	0x080601b4

080a0798 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a0798:	b508      	push	{r3, lr}
 80a079a:	4b02      	ldr	r3, [pc, #8]	; (80a07a4 <HAL_SPI_Is_Enabled+0xc>)
 80a079c:	681b      	ldr	r3, [r3, #0]
 80a079e:	6a1b      	ldr	r3, [r3, #32]
 80a07a0:	9301      	str	r3, [sp, #4]
 80a07a2:	bd08      	pop	{r3, pc}
 80a07a4:	080601b4 	.word	0x080601b4

080a07a8 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a07a8:	b508      	push	{r3, lr}
 80a07aa:	4b02      	ldr	r3, [pc, #8]	; (80a07b4 <HAL_USART_Init+0xc>)
 80a07ac:	681b      	ldr	r3, [r3, #0]
 80a07ae:	699b      	ldr	r3, [r3, #24]
 80a07b0:	9301      	str	r3, [sp, #4]
 80a07b2:	bd08      	pop	{r3, pc}
 80a07b4:	080601c4 	.word	0x080601c4

080a07b8 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a07b8:	b508      	push	{r3, lr}
 80a07ba:	4b02      	ldr	r3, [pc, #8]	; (80a07c4 <HAL_USART_Write_Data+0xc>)
 80a07bc:	681b      	ldr	r3, [r3, #0]
 80a07be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a07c0:	9301      	str	r3, [sp, #4]
 80a07c2:	bd08      	pop	{r3, pc}
 80a07c4:	080601c4 	.word	0x080601c4

080a07c8 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a07c8:	b508      	push	{r3, lr}
 80a07ca:	4b02      	ldr	r3, [pc, #8]	; (80a07d4 <HAL_USART_Available_Data+0xc>)
 80a07cc:	681b      	ldr	r3, [r3, #0]
 80a07ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a07d0:	9301      	str	r3, [sp, #4]
 80a07d2:	bd08      	pop	{r3, pc}
 80a07d4:	080601c4 	.word	0x080601c4

080a07d8 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a07d8:	b508      	push	{r3, lr}
 80a07da:	4b02      	ldr	r3, [pc, #8]	; (80a07e4 <HAL_USART_Read_Data+0xc>)
 80a07dc:	681b      	ldr	r3, [r3, #0]
 80a07de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a07e0:	9301      	str	r3, [sp, #4]
 80a07e2:	bd08      	pop	{r3, pc}
 80a07e4:	080601c4 	.word	0x080601c4

080a07e8 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a07e8:	b508      	push	{r3, lr}
 80a07ea:	4b02      	ldr	r3, [pc, #8]	; (80a07f4 <HAL_USART_Peek_Data+0xc>)
 80a07ec:	681b      	ldr	r3, [r3, #0]
 80a07ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a07f0:	9301      	str	r3, [sp, #4]
 80a07f2:	bd08      	pop	{r3, pc}
 80a07f4:	080601c4 	.word	0x080601c4

080a07f8 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a07f8:	b508      	push	{r3, lr}
 80a07fa:	4b02      	ldr	r3, [pc, #8]	; (80a0804 <HAL_USART_Flush_Data+0xc>)
 80a07fc:	681b      	ldr	r3, [r3, #0]
 80a07fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0800:	9301      	str	r3, [sp, #4]
 80a0802:	bd08      	pop	{r3, pc}
 80a0804:	080601c4 	.word	0x080601c4

080a0808 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a0808:	b508      	push	{r3, lr}
 80a080a:	4b02      	ldr	r3, [pc, #8]	; (80a0814 <HAL_USART_Is_Enabled+0xc>)
 80a080c:	681b      	ldr	r3, [r3, #0]
 80a080e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a0810:	9301      	str	r3, [sp, #4]
 80a0812:	bd08      	pop	{r3, pc}
 80a0814:	080601c4 	.word	0x080601c4

080a0818 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a0818:	b508      	push	{r3, lr}
 80a081a:	4b02      	ldr	r3, [pc, #8]	; (80a0824 <HAL_USART_Available_Data_For_Write+0xc>)
 80a081c:	681b      	ldr	r3, [r3, #0]
 80a081e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0820:	9301      	str	r3, [sp, #4]
 80a0822:	bd08      	pop	{r3, pc}
 80a0824:	080601c4 	.word	0x080601c4

080a0828 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a0828:	b508      	push	{r3, lr}
 80a082a:	4b02      	ldr	r3, [pc, #8]	; (80a0834 <HAL_USB_USART_Init+0xc>)
 80a082c:	681b      	ldr	r3, [r3, #0]
 80a082e:	681b      	ldr	r3, [r3, #0]
 80a0830:	9301      	str	r3, [sp, #4]
 80a0832:	bd08      	pop	{r3, pc}
 80a0834:	080601d8 	.word	0x080601d8

080a0838 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a0838:	b508      	push	{r3, lr}
 80a083a:	4b02      	ldr	r3, [pc, #8]	; (80a0844 <HAL_USB_USART_Begin+0xc>)
 80a083c:	681b      	ldr	r3, [r3, #0]
 80a083e:	685b      	ldr	r3, [r3, #4]
 80a0840:	9301      	str	r3, [sp, #4]
 80a0842:	bd08      	pop	{r3, pc}
 80a0844:	080601d8 	.word	0x080601d8

080a0848 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a0848:	b508      	push	{r3, lr}
 80a084a:	4b02      	ldr	r3, [pc, #8]	; (80a0854 <HAL_USB_USART_Available_Data+0xc>)
 80a084c:	681b      	ldr	r3, [r3, #0]
 80a084e:	691b      	ldr	r3, [r3, #16]
 80a0850:	9301      	str	r3, [sp, #4]
 80a0852:	bd08      	pop	{r3, pc}
 80a0854:	080601d8 	.word	0x080601d8

080a0858 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a0858:	b508      	push	{r3, lr}
 80a085a:	4b02      	ldr	r3, [pc, #8]	; (80a0864 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a085c:	681b      	ldr	r3, [r3, #0]
 80a085e:	695b      	ldr	r3, [r3, #20]
 80a0860:	9301      	str	r3, [sp, #4]
 80a0862:	bd08      	pop	{r3, pc}
 80a0864:	080601d8 	.word	0x080601d8

080a0868 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0868:	b508      	push	{r3, lr}
 80a086a:	4b02      	ldr	r3, [pc, #8]	; (80a0874 <HAL_USB_USART_Receive_Data+0xc>)
 80a086c:	681b      	ldr	r3, [r3, #0]
 80a086e:	699b      	ldr	r3, [r3, #24]
 80a0870:	9301      	str	r3, [sp, #4]
 80a0872:	bd08      	pop	{r3, pc}
 80a0874:	080601d8 	.word	0x080601d8

080a0878 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0878:	b508      	push	{r3, lr}
 80a087a:	4b02      	ldr	r3, [pc, #8]	; (80a0884 <HAL_USB_USART_Send_Data+0xc>)
 80a087c:	681b      	ldr	r3, [r3, #0]
 80a087e:	69db      	ldr	r3, [r3, #28]
 80a0880:	9301      	str	r3, [sp, #4]
 80a0882:	bd08      	pop	{r3, pc}
 80a0884:	080601d8 	.word	0x080601d8

080a0888 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a0888:	b508      	push	{r3, lr}
 80a088a:	4b02      	ldr	r3, [pc, #8]	; (80a0894 <HAL_USB_USART_Flush_Data+0xc>)
 80a088c:	681b      	ldr	r3, [r3, #0]
 80a088e:	6a1b      	ldr	r3, [r3, #32]
 80a0890:	9301      	str	r3, [sp, #4]
 80a0892:	bd08      	pop	{r3, pc}
 80a0894:	080601d8 	.word	0x080601d8

080a0898 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a0898:	b508      	push	{r3, lr}
 80a089a:	4b02      	ldr	r3, [pc, #8]	; (80a08a4 <inet_gethostbyname+0xc>)
 80a089c:	681b      	ldr	r3, [r3, #0]
 80a089e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a08a0:	9301      	str	r3, [sp, #4]
 80a08a2:	bd08      	pop	{r3, pc}
 80a08a4:	080601c0 	.word	0x080601c0

080a08a8 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a08a8:	b508      	push	{r3, lr}
 80a08aa:	4b02      	ldr	r3, [pc, #8]	; (80a08b4 <set_system_mode+0xc>)
 80a08ac:	681b      	ldr	r3, [r3, #0]
 80a08ae:	685b      	ldr	r3, [r3, #4]
 80a08b0:	9301      	str	r3, [sp, #4]
 80a08b2:	bd08      	pop	{r3, pc}
 80a08b4:	080601a4 	.word	0x080601a4

080a08b8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a08b8:	b508      	push	{r3, lr}
 80a08ba:	4b02      	ldr	r3, [pc, #8]	; (80a08c4 <system_delay_ms+0xc>)
 80a08bc:	681b      	ldr	r3, [r3, #0]
 80a08be:	695b      	ldr	r3, [r3, #20]
 80a08c0:	9301      	str	r3, [sp, #4]
 80a08c2:	bd08      	pop	{r3, pc}
 80a08c4:	080601a4 	.word	0x080601a4

080a08c8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a08c8:	b508      	push	{r3, lr}
 80a08ca:	4b03      	ldr	r3, [pc, #12]	; (80a08d8 <system_ctrl_set_app_request_handler+0x10>)
 80a08cc:	681b      	ldr	r3, [r3, #0]
 80a08ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a08d2:	9301      	str	r3, [sp, #4]
 80a08d4:	bd08      	pop	{r3, pc}
 80a08d6:	0000      	.short	0x0000
 80a08d8:	080601a4 	.word	0x080601a4

080a08dc <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a08dc:	b508      	push	{r3, lr}
 80a08de:	4b03      	ldr	r3, [pc, #12]	; (80a08ec <system_ctrl_set_result+0x10>)
 80a08e0:	681b      	ldr	r3, [r3, #0]
 80a08e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a08e6:	9301      	str	r3, [sp, #4]
 80a08e8:	bd08      	pop	{r3, pc}
 80a08ea:	0000      	.short	0x0000
 80a08ec:	080601a4 	.word	0x080601a4

080a08f0 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 80a08f0:	b508      	push	{r3, lr}
 80a08f2:	4b02      	ldr	r3, [pc, #8]	; (80a08fc <spark_variable+0xc>)
 80a08f4:	681b      	ldr	r3, [r3, #0]
 80a08f6:	681b      	ldr	r3, [r3, #0]
 80a08f8:	9301      	str	r3, [sp, #4]
 80a08fa:	bd08      	pop	{r3, pc}
 80a08fc:	080601cc 	.word	0x080601cc

080a0900 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 80a0900:	b508      	push	{r3, lr}
 80a0902:	4b02      	ldr	r3, [pc, #8]	; (80a090c <spark_function+0xc>)
 80a0904:	681b      	ldr	r3, [r3, #0]
 80a0906:	685b      	ldr	r3, [r3, #4]
 80a0908:	9301      	str	r3, [sp, #4]
 80a090a:	bd08      	pop	{r3, pc}
 80a090c:	080601cc 	.word	0x080601cc

080a0910 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a0910:	b508      	push	{r3, lr}
 80a0912:	4b02      	ldr	r3, [pc, #8]	; (80a091c <spark_set_random_seed_from_cloud_handler+0xc>)
 80a0914:	681b      	ldr	r3, [r3, #0]
 80a0916:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0918:	9301      	str	r3, [sp, #4]
 80a091a:	bd08      	pop	{r3, pc}
 80a091c:	080601cc 	.word	0x080601cc

080a0920 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0920:	b508      	push	{r3, lr}
 80a0922:	4b02      	ldr	r3, [pc, #8]	; (80a092c <network_connect+0xc>)
 80a0924:	681b      	ldr	r3, [r3, #0]
 80a0926:	685b      	ldr	r3, [r3, #4]
 80a0928:	9301      	str	r3, [sp, #4]
 80a092a:	bd08      	pop	{r3, pc}
 80a092c:	080601c8 	.word	0x080601c8

080a0930 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a0930:	b508      	push	{r3, lr}
 80a0932:	4b02      	ldr	r3, [pc, #8]	; (80a093c <network_connecting+0xc>)
 80a0934:	681b      	ldr	r3, [r3, #0]
 80a0936:	689b      	ldr	r3, [r3, #8]
 80a0938:	9301      	str	r3, [sp, #4]
 80a093a:	bd08      	pop	{r3, pc}
 80a093c:	080601c8 	.word	0x080601c8

080a0940 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a0940:	b508      	push	{r3, lr}
 80a0942:	4b02      	ldr	r3, [pc, #8]	; (80a094c <network_disconnect+0xc>)
 80a0944:	681b      	ldr	r3, [r3, #0]
 80a0946:	68db      	ldr	r3, [r3, #12]
 80a0948:	9301      	str	r3, [sp, #4]
 80a094a:	bd08      	pop	{r3, pc}
 80a094c:	080601c8 	.word	0x080601c8

080a0950 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a0950:	b508      	push	{r3, lr}
 80a0952:	4b02      	ldr	r3, [pc, #8]	; (80a095c <network_ready+0xc>)
 80a0954:	681b      	ldr	r3, [r3, #0]
 80a0956:	691b      	ldr	r3, [r3, #16]
 80a0958:	9301      	str	r3, [sp, #4]
 80a095a:	bd08      	pop	{r3, pc}
 80a095c:	080601c8 	.word	0x080601c8

080a0960 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0960:	b508      	push	{r3, lr}
 80a0962:	4b02      	ldr	r3, [pc, #8]	; (80a096c <network_on+0xc>)
 80a0964:	681b      	ldr	r3, [r3, #0]
 80a0966:	695b      	ldr	r3, [r3, #20]
 80a0968:	9301      	str	r3, [sp, #4]
 80a096a:	bd08      	pop	{r3, pc}
 80a096c:	080601c8 	.word	0x080601c8

080a0970 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0970:	b508      	push	{r3, lr}
 80a0972:	4b02      	ldr	r3, [pc, #8]	; (80a097c <network_off+0xc>)
 80a0974:	681b      	ldr	r3, [r3, #0]
 80a0976:	699b      	ldr	r3, [r3, #24]
 80a0978:	9301      	str	r3, [sp, #4]
 80a097a:	bd08      	pop	{r3, pc}
 80a097c:	080601c8 	.word	0x080601c8

080a0980 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a0980:	b508      	push	{r3, lr}
 80a0982:	4b02      	ldr	r3, [pc, #8]	; (80a098c <network_listen+0xc>)
 80a0984:	681b      	ldr	r3, [r3, #0]
 80a0986:	69db      	ldr	r3, [r3, #28]
 80a0988:	9301      	str	r3, [sp, #4]
 80a098a:	bd08      	pop	{r3, pc}
 80a098c:	080601c8 	.word	0x080601c8

080a0990 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a0990:	b508      	push	{r3, lr}
 80a0992:	4b02      	ldr	r3, [pc, #8]	; (80a099c <network_listening+0xc>)
 80a0994:	681b      	ldr	r3, [r3, #0]
 80a0996:	6a1b      	ldr	r3, [r3, #32]
 80a0998:	9301      	str	r3, [sp, #4]
 80a099a:	bd08      	pop	{r3, pc}
 80a099c:	080601c8 	.word	0x080601c8

080a09a0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a09a0:	b508      	push	{r3, lr}
 80a09a2:	4b02      	ldr	r3, [pc, #8]	; (80a09ac <network_set_listen_timeout+0xc>)
 80a09a4:	681b      	ldr	r3, [r3, #0]
 80a09a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a09a8:	9301      	str	r3, [sp, #4]
 80a09aa:	bd08      	pop	{r3, pc}
 80a09ac:	080601c8 	.word	0x080601c8

080a09b0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a09b0:	b508      	push	{r3, lr}
 80a09b2:	4b02      	ldr	r3, [pc, #8]	; (80a09bc <network_get_listen_timeout+0xc>)
 80a09b4:	681b      	ldr	r3, [r3, #0]
 80a09b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a09b8:	9301      	str	r3, [sp, #4]
 80a09ba:	bd08      	pop	{r3, pc}
 80a09bc:	080601c8 	.word	0x080601c8

080a09c0 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a09c0:	b508      	push	{r3, lr}
 80a09c2:	4b02      	ldr	r3, [pc, #8]	; (80a09cc <malloc+0xc>)
 80a09c4:	681b      	ldr	r3, [r3, #0]
 80a09c6:	681b      	ldr	r3, [r3, #0]
 80a09c8:	9301      	str	r3, [sp, #4]
 80a09ca:	bd08      	pop	{r3, pc}
 80a09cc:	080601a0 	.word	0x080601a0

080a09d0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a09d0:	b508      	push	{r3, lr}
 80a09d2:	4b02      	ldr	r3, [pc, #8]	; (80a09dc <free+0xc>)
 80a09d4:	681b      	ldr	r3, [r3, #0]
 80a09d6:	685b      	ldr	r3, [r3, #4]
 80a09d8:	9301      	str	r3, [sp, #4]
 80a09da:	bd08      	pop	{r3, pc}
 80a09dc:	080601a0 	.word	0x080601a0

080a09e0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a09e0:	b508      	push	{r3, lr}
 80a09e2:	4b02      	ldr	r3, [pc, #8]	; (80a09ec <realloc+0xc>)
 80a09e4:	681b      	ldr	r3, [r3, #0]
 80a09e6:	689b      	ldr	r3, [r3, #8]
 80a09e8:	9301      	str	r3, [sp, #4]
 80a09ea:	bd08      	pop	{r3, pc}
 80a09ec:	080601a0 	.word	0x080601a0

080a09f0 <snprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 80a09f0:	b508      	push	{r3, lr}
 80a09f2:	4b02      	ldr	r3, [pc, #8]	; (80a09fc <snprintf+0xc>)
 80a09f4:	681b      	ldr	r3, [r3, #0]
 80a09f6:	69db      	ldr	r3, [r3, #28]
 80a09f8:	9301      	str	r3, [sp, #4]
 80a09fa:	bd08      	pop	{r3, pc}
 80a09fc:	080601a0 	.word	0x080601a0

080a0a00 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a0a00:	2100      	movs	r1, #0
 80a0a02:	f7ff bf59 	b.w	80a08b8 <system_delay_ms>

080a0a06 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0a06:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a0a08:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0a0a:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a0a0c:	b113      	cbz	r3, 80a0a14 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a0a0e:	2203      	movs	r2, #3
 80a0a10:	4601      	mov	r1, r0
 80a0a12:	4798      	blx	r3
    }
 80a0a14:	4620      	mov	r0, r4
 80a0a16:	bd10      	pop	{r4, pc}

080a0a18 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
#endif

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 80a0a18:	b510      	push	{r4, lr}
 80a0a1a:	b088      	sub	sp, #32
 80a0a1c:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80a0a1e:	4668      	mov	r0, sp
 80a0a20:	f000 fa26 	bl	80a0e70 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
 80a0a24:	4669      	mov	r1, sp
 80a0a26:	a804      	add	r0, sp, #16
 80a0a28:	f000 fa44 	bl	80a0eb4 <_ZN6StringC1ERKS_>
 80a0a2c:	a804      	add	r0, sp, #16
 80a0a2e:	47a0      	blx	r4
 80a0a30:	4604      	mov	r4, r0
 80a0a32:	a804      	add	r0, sp, #16
 80a0a34:	f000 f9d5 	bl	80a0de2 <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80a0a38:	4668      	mov	r0, sp
 80a0a3a:	f000 f9d2 	bl	80a0de2 <_ZN6StringD1Ev>
    return (*fn)(p);
}
 80a0a3e:	4620      	mov	r0, r4
 80a0a40:	b008      	add	sp, #32
 80a0a42:	bd10      	pop	{r4, pc}

080a0a44 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 80a0a44:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0a46:	4607      	mov	r7, r0
 80a0a48:	460e      	mov	r6, r1
 80a0a4a:	4615      	mov	r5, r2
 80a0a4c:	b085      	sub	sp, #20
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 80a0a4e:	2410      	movs	r4, #16
 80a0a50:	4622      	mov	r2, r4
 80a0a52:	2100      	movs	r1, #0
 80a0a54:	4668      	mov	r0, sp
 80a0a56:	f000 fec2 	bl	80a17de <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80a0a5a:	2200      	movs	r2, #0
 80a0a5c:	4669      	mov	r1, sp
 80a0a5e:	4610      	mov	r0, r2
         size = sizeof(*this);
 80a0a60:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
 80a0a64:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
 80a0a66:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
 80a0a68:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80a0a6a:	f7ff ff49 	bl	80a0900 <spark_function>
}
 80a0a6e:	b005      	add	sp, #20
 80a0a70:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a0a72 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a0a72:	4770      	bx	lr

080a0a74 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a0a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0a76:	4606      	mov	r6, r0
 80a0a78:	4615      	mov	r5, r2
 80a0a7a:	460c      	mov	r4, r1
 80a0a7c:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a0a7e:	42bc      	cmp	r4, r7
 80a0a80:	d006      	beq.n	80a0a90 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a0a82:	6833      	ldr	r3, [r6, #0]
 80a0a84:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a0a88:	689b      	ldr	r3, [r3, #8]
 80a0a8a:	4630      	mov	r0, r6
 80a0a8c:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a0a8e:	e7f6      	b.n	80a0a7e <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a0a90:	4628      	mov	r0, r5
 80a0a92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0a94 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a0a94:	2200      	movs	r2, #0
 80a0a96:	7c00      	ldrb	r0, [r0, #16]
 80a0a98:	f7ff be3c 	b.w	80a0714 <HAL_I2C_Write_Data>

080a0a9c <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a0a9c:	2100      	movs	r1, #0
 80a0a9e:	7c00      	ldrb	r0, [r0, #16]
 80a0aa0:	f7ff be40 	b.w	80a0724 <HAL_I2C_Available_Data>

080a0aa4 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a0aa4:	2100      	movs	r1, #0
 80a0aa6:	7c00      	ldrb	r0, [r0, #16]
 80a0aa8:	f7ff be44 	b.w	80a0734 <HAL_I2C_Read_Data>

080a0aac <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a0aac:	2100      	movs	r1, #0
 80a0aae:	7c00      	ldrb	r0, [r0, #16]
 80a0ab0:	f7ff be48 	b.w	80a0744 <HAL_I2C_Peek_Data>

080a0ab4 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a0ab4:	2100      	movs	r1, #0
 80a0ab6:	7c00      	ldrb	r0, [r0, #16]
 80a0ab8:	f7ff be4c 	b.w	80a0754 <HAL_I2C_Flush_Data>

080a0abc <_ZN7TwoWireD0Ev>:
 80a0abc:	b510      	push	{r4, lr}
 80a0abe:	4604      	mov	r4, r0
 80a0ac0:	2114      	movs	r1, #20
 80a0ac2:	f000 fd28 	bl	80a1516 <_ZdlPvj>
 80a0ac6:	4620      	mov	r0, r4
 80a0ac8:	bd10      	pop	{r4, pc}
	...

080a0acc <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a0acc:	b510      	push	{r4, lr}
 80a0ace:	4604      	mov	r4, r0
 80a0ad0:	4608      	mov	r0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a0ad2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0ad6:	60a3      	str	r3, [r4, #8]
 80a0ad8:	4b04      	ldr	r3, [pc, #16]	; (80a0aec <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a0ada:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a0adc:	7420      	strb	r0, [r4, #16]
 80a0ade:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a0ae0:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a0ae2:	f7ff fe47 	bl	80a0774 <HAL_I2C_Init>

}
 80a0ae6:	4620      	mov	r0, r4
 80a0ae8:	bd10      	pop	{r4, pc}
 80a0aea:	bf00      	nop
 80a0aec:	080a18dc 	.word	0x080a18dc

080a0af0 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a0af0:	2100      	movs	r1, #0
 80a0af2:	7c00      	ldrb	r0, [r0, #16]
 80a0af4:	f7ff be36 	b.w	80a0764 <HAL_I2C_Is_Enabled>

080a0af8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a0af8:	4770      	bx	lr

080a0afa <_ZN9IPAddressD0Ev>:
 80a0afa:	b510      	push	{r4, lr}
 80a0afc:	4604      	mov	r4, r0
 80a0afe:	2118      	movs	r1, #24
 80a0b00:	f000 fd09 	bl	80a1516 <_ZdlPvj>
 80a0b04:	4620      	mov	r0, r4
 80a0b06:	bd10      	pop	{r4, pc}

080a0b08 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a0b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0b0a:	460f      	mov	r7, r1
 80a0b0c:	f100 0608 	add.w	r6, r0, #8
 80a0b10:	1d05      	adds	r5, r0, #4
 80a0b12:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a0b14:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a0b18:	220a      	movs	r2, #10
 80a0b1a:	4638      	mov	r0, r7
 80a0b1c:	f000 f92b 	bl	80a0d76 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a0b20:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a0b22:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a0b24:	d007      	beq.n	80a0b36 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a0b26:	2c00      	cmp	r4, #0
 80a0b28:	d0f4      	beq.n	80a0b14 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a0b2a:	212e      	movs	r1, #46	; 0x2e
 80a0b2c:	4638      	mov	r0, r7
 80a0b2e:	f000 f8df 	bl	80a0cf0 <_ZN5Print5printEc>
 80a0b32:	4404      	add	r4, r0
 80a0b34:	e7ee      	b.n	80a0b14 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a0b36:	4620      	mov	r0, r4
 80a0b38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a0b3c <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a0b3c:	b510      	push	{r4, lr}
 80a0b3e:	4604      	mov	r4, r0
 80a0b40:	4b04      	ldr	r3, [pc, #16]	; (80a0b54 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a0b42:	2211      	movs	r2, #17
 80a0b44:	f840 3b04 	str.w	r3, [r0], #4
 80a0b48:	2100      	movs	r1, #0
 80a0b4a:	f000 fe48 	bl	80a17de <memset>
{
    clear();
}
 80a0b4e:	4620      	mov	r0, r4
 80a0b50:	bd10      	pop	{r4, pc}
 80a0b52:	bf00      	nop
 80a0b54:	080a1904 	.word	0x080a1904

080a0b58 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a0b58:	4603      	mov	r3, r0
 80a0b5a:	4a07      	ldr	r2, [pc, #28]	; (80a0b78 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a0b5c:	b510      	push	{r4, lr}
 80a0b5e:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a0b62:	f101 0210 	add.w	r2, r1, #16
 80a0b66:	f851 4b04 	ldr.w	r4, [r1], #4
 80a0b6a:	4291      	cmp	r1, r2
 80a0b6c:	f843 4b04 	str.w	r4, [r3], #4
 80a0b70:	d1f9      	bne.n	80a0b66 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a0b72:	780a      	ldrb	r2, [r1, #0]
 80a0b74:	701a      	strb	r2, [r3, #0]
}
 80a0b76:	bd10      	pop	{r4, pc}
 80a0b78:	080a1904 	.word	0x080a1904

080a0b7c <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a0b7c:	4a02      	ldr	r2, [pc, #8]	; (80a0b88 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a0b7e:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a0b80:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a0b82:	2204      	movs	r2, #4
 80a0b84:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a0b86:	4770      	bx	lr
 80a0b88:	080a1904 	.word	0x080a1904

080a0b8c <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a0b8c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a0b8e:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a0b92:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a0b96:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a0b9a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a0b9e:	2304      	movs	r3, #4
 80a0ba0:	6041      	str	r1, [r0, #4]
 80a0ba2:	7503      	strb	r3, [r0, #20]
 80a0ba4:	bd10      	pop	{r4, pc}
	...

080a0ba8 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a0ba8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a0baa:	4d04      	ldr	r5, [pc, #16]	; (80a0bbc <_ZN9IPAddressC1Ehhhh+0x14>)
 80a0bac:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a0bae:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a0bb2:	9500      	str	r5, [sp, #0]
 80a0bb4:	f7ff ffea 	bl	80a0b8c <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a0bb8:	b003      	add	sp, #12
 80a0bba:	bd30      	pop	{r4, r5, pc}
 80a0bbc:	080a1904 	.word	0x080a1904

080a0bc0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a0bc0:	4a01      	ldr	r2, [pc, #4]	; (80a0bc8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a0bc2:	4b02      	ldr	r3, [pc, #8]	; (80a0bcc <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a0bc4:	601a      	str	r2, [r3, #0]
 80a0bc6:	4770      	bx	lr
 80a0bc8:	080a1986 	.word	0x080a1986
 80a0bcc:	20000090 	.word	0x20000090

080a0bd0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a0bd0:	2300      	movs	r3, #0
 80a0bd2:	461a      	mov	r2, r3
 80a0bd4:	6840      	ldr	r0, [r0, #4]
 80a0bd6:	f7ff bea3 	b.w	80a0920 <network_connect>

080a0bda <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a0bda:	2200      	movs	r2, #0
 80a0bdc:	2102      	movs	r1, #2
 80a0bde:	6840      	ldr	r0, [r0, #4]
 80a0be0:	f7ff beae 	b.w	80a0940 <network_disconnect>

080a0be4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a0be4:	2200      	movs	r2, #0
 80a0be6:	4611      	mov	r1, r2
 80a0be8:	6840      	ldr	r0, [r0, #4]
 80a0bea:	f7ff bea1 	b.w	80a0930 <network_connecting>

080a0bee <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a0bee:	2200      	movs	r2, #0
 80a0bf0:	4611      	mov	r1, r2
 80a0bf2:	6840      	ldr	r0, [r0, #4]
 80a0bf4:	f7ff beac 	b.w	80a0950 <network_ready>

080a0bf8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a0bf8:	2300      	movs	r3, #0
 80a0bfa:	461a      	mov	r2, r3
 80a0bfc:	4619      	mov	r1, r3
 80a0bfe:	6840      	ldr	r0, [r0, #4]
 80a0c00:	f7ff beae 	b.w	80a0960 <network_on>

080a0c04 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a0c04:	2300      	movs	r3, #0
 80a0c06:	461a      	mov	r2, r3
 80a0c08:	4619      	mov	r1, r3
 80a0c0a:	6840      	ldr	r0, [r0, #4]
 80a0c0c:	f7ff beb0 	b.w	80a0970 <network_off>

080a0c10 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a0c10:	2200      	movs	r2, #0
 80a0c12:	f081 0101 	eor.w	r1, r1, #1
 80a0c16:	6840      	ldr	r0, [r0, #4]
 80a0c18:	f7ff beb2 	b.w	80a0980 <network_listen>

080a0c1c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a0c1c:	2200      	movs	r2, #0
 80a0c1e:	6840      	ldr	r0, [r0, #4]
 80a0c20:	f7ff bebe 	b.w	80a09a0 <network_set_listen_timeout>

080a0c24 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a0c24:	2200      	movs	r2, #0
 80a0c26:	4611      	mov	r1, r2
 80a0c28:	6840      	ldr	r0, [r0, #4]
 80a0c2a:	f7ff bec1 	b.w	80a09b0 <network_get_listen_timeout>

080a0c2e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a0c2e:	2200      	movs	r2, #0
 80a0c30:	4611      	mov	r1, r2
 80a0c32:	6840      	ldr	r0, [r0, #4]
 80a0c34:	f7ff beac 	b.w	80a0990 <network_listening>

080a0c38 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a0c38:	b570      	push	{r4, r5, r6, lr}
 80a0c3a:	4616      	mov	r6, r2
 80a0c3c:	b08e      	sub	sp, #56	; 0x38
 80a0c3e:	4604      	mov	r4, r0
    IPAddress addr;
 80a0c40:	a808      	add	r0, sp, #32
 80a0c42:	f7ff ff7b 	bl	80a0b3c <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a0c46:	2211      	movs	r2, #17
 80a0c48:	2100      	movs	r1, #0
 80a0c4a:	a803      	add	r0, sp, #12
 80a0c4c:	f000 fdc7 	bl	80a17de <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a0c50:	4630      	mov	r0, r6
 80a0c52:	f000 fdff 	bl	80a1854 <strlen>
 80a0c56:	2500      	movs	r5, #0
 80a0c58:	4b0a      	ldr	r3, [pc, #40]	; (80a0c84 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a0c5a:	9500      	str	r5, [sp, #0]
 80a0c5c:	b281      	uxth	r1, r0
 80a0c5e:	685b      	ldr	r3, [r3, #4]
 80a0c60:	aa03      	add	r2, sp, #12
 80a0c62:	4630      	mov	r0, r6
 80a0c64:	f7ff fe18 	bl	80a0898 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a0c68:	b120      	cbz	r0, 80a0c74 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a0c6a:	4629      	mov	r1, r5
 80a0c6c:	4620      	mov	r0, r4
 80a0c6e:	f7ff ff85 	bl	80a0b7c <_ZN9IPAddressC1Em>
 80a0c72:	e003      	b.n	80a0c7c <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a0c74:	a903      	add	r1, sp, #12
 80a0c76:	4620      	mov	r0, r4
 80a0c78:	f7ff ff6e 	bl	80a0b58 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a0c7c:	4620      	mov	r0, r4
 80a0c7e:	b00e      	add	sp, #56	; 0x38
 80a0c80:	bd70      	pop	{r4, r5, r6, pc}
 80a0c82:	bf00      	nop
 80a0c84:	20000514 	.word	0x20000514

080a0c88 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a0c88:	4b02      	ldr	r3, [pc, #8]	; (80a0c94 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a0c8a:	4a03      	ldr	r2, [pc, #12]	; (80a0c98 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a0c8c:	601a      	str	r2, [r3, #0]
 80a0c8e:	2200      	movs	r2, #0
 80a0c90:	605a      	str	r2, [r3, #4]
 80a0c92:	4770      	bx	lr
 80a0c94:	20000094 	.word	0x20000094
 80a0c98:	080a19fc 	.word	0x080a19fc

080a0c9c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a0c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0c9e:	4606      	mov	r6, r0
 80a0ca0:	460d      	mov	r5, r1
 80a0ca2:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a0ca4:	2400      	movs	r4, #0
  while (size--) {
 80a0ca6:	42bd      	cmp	r5, r7
 80a0ca8:	d00c      	beq.n	80a0cc4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a0caa:	6833      	ldr	r3, [r6, #0]
 80a0cac:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a0cb0:	689b      	ldr	r3, [r3, #8]
 80a0cb2:	4630      	mov	r0, r6
 80a0cb4:	4798      	blx	r3
     if (chunk>=0)
 80a0cb6:	2800      	cmp	r0, #0
 80a0cb8:	db01      	blt.n	80a0cbe <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a0cba:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a0cbc:	e7f3      	b.n	80a0ca6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a0cbe:	2c00      	cmp	r4, #0
 80a0cc0:	bf08      	it	eq
 80a0cc2:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a0cc4:	4620      	mov	r0, r4
 80a0cc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0cc8 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a0cc8:	b570      	push	{r4, r5, r6, lr}
 80a0cca:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a0ccc:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a0cce:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a0cd0:	b149      	cbz	r1, 80a0ce6 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a0cd2:	f000 fdbf 	bl	80a1854 <strlen>
 80a0cd6:	682b      	ldr	r3, [r5, #0]
 80a0cd8:	4602      	mov	r2, r0
 80a0cda:	4621      	mov	r1, r4
 80a0cdc:	4628      	mov	r0, r5
    }
 80a0cde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a0ce2:	68db      	ldr	r3, [r3, #12]
 80a0ce4:	4718      	bx	r3
    }
 80a0ce6:	bd70      	pop	{r4, r5, r6, pc}

080a0ce8 <_ZN5Print5printEPKc>:
 80a0ce8:	b508      	push	{r3, lr}
 80a0cea:	f7ff ffed 	bl	80a0cc8 <_ZN5Print5writeEPKc>
 80a0cee:	bd08      	pop	{r3, pc}

080a0cf0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a0cf0:	6803      	ldr	r3, [r0, #0]
 80a0cf2:	689b      	ldr	r3, [r3, #8]
 80a0cf4:	4718      	bx	r3

080a0cf6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a0cf6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a0cf8:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a0cfa:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a0cfc:	f7ff fff8 	bl	80a0cf0 <_ZN5Print5printEc>
  n += print('\n');
 80a0d00:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a0d02:	4604      	mov	r4, r0
  n += print('\n');
 80a0d04:	4628      	mov	r0, r5
 80a0d06:	f7ff fff3 	bl	80a0cf0 <_ZN5Print5printEc>
  return n;
}
 80a0d0a:	4420      	add	r0, r4
 80a0d0c:	bd38      	pop	{r3, r4, r5, pc}

080a0d0e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a0d0e:	b538      	push	{r3, r4, r5, lr}
 80a0d10:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a0d12:	f7ff ffd9 	bl	80a0cc8 <_ZN5Print5writeEPKc>
 80a0d16:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a0d18:	4628      	mov	r0, r5
 80a0d1a:	f7ff ffec 	bl	80a0cf6 <_ZN5Print7printlnEv>
  return n;
}
 80a0d1e:	4420      	add	r0, r4
 80a0d20:	bd38      	pop	{r3, r4, r5, pc}

080a0d22 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a0d22:	2a01      	cmp	r2, #1
 80a0d24:	bf98      	it	ls
 80a0d26:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a0d28:	b530      	push	{r4, r5, lr}
 80a0d2a:	460b      	mov	r3, r1
 80a0d2c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a0d2e:	2100      	movs	r1, #0
 80a0d30:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a0d34:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a0d38:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a0d3c:	fb05 3312 	mls	r3, r5, r2, r3
 80a0d40:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a0d42:	2b09      	cmp	r3, #9
 80a0d44:	bf94      	ite	ls
 80a0d46:	3330      	addls	r3, #48	; 0x30
 80a0d48:	3337      	addhi	r3, #55	; 0x37
 80a0d4a:	b2db      	uxtb	r3, r3
 80a0d4c:	4621      	mov	r1, r4
 80a0d4e:	f804 3901 	strb.w	r3, [r4], #-1
 80a0d52:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a0d54:	2d00      	cmp	r5, #0
 80a0d56:	d1ef      	bne.n	80a0d38 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a0d58:	f7ff ffb6 	bl	80a0cc8 <_ZN5Print5writeEPKc>
}
 80a0d5c:	b00b      	add	sp, #44	; 0x2c
 80a0d5e:	bd30      	pop	{r4, r5, pc}

080a0d60 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a0d60:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a0d62:	b922      	cbnz	r2, 80a0d6e <_ZN5Print5printEmi+0xe>
 80a0d64:	6803      	ldr	r3, [r0, #0]
 80a0d66:	b2c9      	uxtb	r1, r1
 80a0d68:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a0d6a:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a0d6c:	4718      	bx	r3
  else return printNumber(n, base);
 80a0d6e:	b2d2      	uxtb	r2, r2
}
 80a0d70:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a0d72:	f7ff bfd6 	b.w	80a0d22 <_ZN5Print11printNumberEmh>

080a0d76 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a0d76:	f7ff bff3 	b.w	80a0d60 <_ZN5Print5printEmi>

080a0d7a <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a0d7a:	b510      	push	{r4, lr}
 80a0d7c:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0d7e:	f7ff fe42 	bl	80a0a06 <_ZNSt14_Function_baseD1Ev>
 80a0d82:	4620      	mov	r0, r4
 80a0d84:	bd10      	pop	{r4, pc}
	...

080a0d88 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0d88:	4803      	ldr	r0, [pc, #12]	; (80a0d98 <_GLOBAL__sub_I_RGB+0x10>)
 80a0d8a:	2300      	movs	r3, #0
 80a0d8c:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a0d8e:	4a03      	ldr	r2, [pc, #12]	; (80a0d9c <_GLOBAL__sub_I_RGB+0x14>)
 80a0d90:	4903      	ldr	r1, [pc, #12]	; (80a0da0 <_GLOBAL__sub_I_RGB+0x18>)
 80a0d92:	f000 bbbb 	b.w	80a150c <__aeabi_atexit>
 80a0d96:	bf00      	nop
 80a0d98:	2000009c 	.word	0x2000009c
 80a0d9c:	20000068 	.word	0x20000068
 80a0da0:	080a0d7b 	.word	0x080a0d7b

080a0da4 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a0da4:	4770      	bx	lr

080a0da6 <_ZN8SPIClassD0Ev>:
 80a0da6:	b510      	push	{r4, lr}
 80a0da8:	4604      	mov	r4, r0
 80a0daa:	2110      	movs	r1, #16
 80a0dac:	f000 fbb3 	bl	80a1516 <_ZdlPvj>
 80a0db0:	4620      	mov	r0, r4
 80a0db2:	bd10      	pop	{r4, pc}

080a0db4 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a0db4:	b570      	push	{r4, r5, r6, lr}
 80a0db6:	4604      	mov	r4, r0
 80a0db8:	460e      	mov	r6, r1
 80a0dba:	4b07      	ldr	r3, [pc, #28]	; (80a0dd8 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a0dbc:	2500      	movs	r5, #0
 80a0dbe:	6003      	str	r3, [r0, #0]
 80a0dc0:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a0dc4:	f7ff fc6e 	bl	80a06a4 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a0dc8:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a0dca:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a0dcc:	f7ff fcdc 	bl	80a0788 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a0dd0:	60a5      	str	r5, [r4, #8]
}
 80a0dd2:	4620      	mov	r0, r4
 80a0dd4:	bd70      	pop	{r4, r5, r6, pc}
 80a0dd6:	bf00      	nop
 80a0dd8:	080a1a30 	.word	0x080a1a30

080a0ddc <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a0ddc:	7900      	ldrb	r0, [r0, #4]
 80a0dde:	f7ff bcdb 	b.w	80a0798 <HAL_SPI_Is_Enabled>

080a0de2 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a0de2:	b510      	push	{r4, lr}
 80a0de4:	4604      	mov	r4, r0
{
	free(buffer);
 80a0de6:	6800      	ldr	r0, [r0, #0]
 80a0de8:	f7ff fdf2 	bl	80a09d0 <free>
}
 80a0dec:	4620      	mov	r0, r4
 80a0dee:	bd10      	pop	{r4, pc}

080a0df0 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a0df0:	b510      	push	{r4, lr}
 80a0df2:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a0df4:	6800      	ldr	r0, [r0, #0]
 80a0df6:	b108      	cbz	r0, 80a0dfc <_ZN6String10invalidateEv+0xc>
 80a0df8:	f7ff fdea 	bl	80a09d0 <free>
	buffer = NULL;
 80a0dfc:	2300      	movs	r3, #0
 80a0dfe:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a0e00:	60a3      	str	r3, [r4, #8]
 80a0e02:	6063      	str	r3, [r4, #4]
 80a0e04:	bd10      	pop	{r4, pc}

080a0e06 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a0e06:	b538      	push	{r3, r4, r5, lr}
 80a0e08:	4604      	mov	r4, r0
 80a0e0a:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a0e0c:	6800      	ldr	r0, [r0, #0]
 80a0e0e:	3101      	adds	r1, #1
 80a0e10:	f7ff fde6 	bl	80a09e0 <realloc>
	if (newbuffer) {
 80a0e14:	b110      	cbz	r0, 80a0e1c <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a0e16:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a0e1a:	2001      	movs	r0, #1
	}
	return 0;
}
 80a0e1c:	bd38      	pop	{r3, r4, r5, pc}

080a0e1e <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a0e1e:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a0e20:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a0e22:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a0e24:	b113      	cbz	r3, 80a0e2c <_ZN6String7reserveEj+0xe>
 80a0e26:	6843      	ldr	r3, [r0, #4]
 80a0e28:	428b      	cmp	r3, r1
 80a0e2a:	d207      	bcs.n	80a0e3c <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a0e2c:	4620      	mov	r0, r4
 80a0e2e:	f7ff ffea 	bl	80a0e06 <_ZN6String12changeBufferEj>
 80a0e32:	b120      	cbz	r0, 80a0e3e <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a0e34:	68a3      	ldr	r3, [r4, #8]
 80a0e36:	b90b      	cbnz	r3, 80a0e3c <_ZN6String7reserveEj+0x1e>
 80a0e38:	6822      	ldr	r2, [r4, #0]
 80a0e3a:	7013      	strb	r3, [r2, #0]
 80a0e3c:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a0e3e:	bd10      	pop	{r4, pc}

080a0e40 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a0e40:	b570      	push	{r4, r5, r6, lr}
 80a0e42:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a0e44:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a0e46:	4604      	mov	r4, r0
 80a0e48:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a0e4a:	f7ff ffe8 	bl	80a0e1e <_ZN6String7reserveEj>
 80a0e4e:	b918      	cbnz	r0, 80a0e58 <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a0e50:	4620      	mov	r0, r4
 80a0e52:	f7ff ffcd 	bl	80a0df0 <_ZN6String10invalidateEv>
		return *this;
 80a0e56:	e009      	b.n	80a0e6c <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a0e58:	462a      	mov	r2, r5
 80a0e5a:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a0e5c:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a0e5e:	6820      	ldr	r0, [r4, #0]
 80a0e60:	f000 fcb2 	bl	80a17c8 <memcpy>
	buffer[len] = 0;
 80a0e64:	6822      	ldr	r2, [r4, #0]
 80a0e66:	68a3      	ldr	r3, [r4, #8]
 80a0e68:	2100      	movs	r1, #0
 80a0e6a:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a0e6c:	4620      	mov	r0, r4
 80a0e6e:	bd70      	pop	{r4, r5, r6, pc}

080a0e70 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a0e70:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a0e72:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a0e74:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a0e76:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a0e78:	6043      	str	r3, [r0, #4]
	len = 0;
 80a0e7a:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a0e7c:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a0e7e:	460d      	mov	r5, r1
 80a0e80:	b139      	cbz	r1, 80a0e92 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a0e82:	4608      	mov	r0, r1
 80a0e84:	f000 fce6 	bl	80a1854 <strlen>
 80a0e88:	4629      	mov	r1, r5
 80a0e8a:	4602      	mov	r2, r0
 80a0e8c:	4620      	mov	r0, r4
 80a0e8e:	f7ff ffd7 	bl	80a0e40 <_ZN6String4copyEPKcj>
}
 80a0e92:	4620      	mov	r0, r4
 80a0e94:	bd38      	pop	{r3, r4, r5, pc}

080a0e96 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80a0e96:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 80a0e98:	b510      	push	{r4, lr}
 80a0e9a:	460b      	mov	r3, r1
 80a0e9c:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80a0e9e:	d007      	beq.n	80a0eb0 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80a0ea0:	6809      	ldr	r1, [r1, #0]
 80a0ea2:	b119      	cbz	r1, 80a0eac <_ZN6StringaSERKS_+0x16>
 80a0ea4:	689a      	ldr	r2, [r3, #8]
 80a0ea6:	f7ff ffcb 	bl	80a0e40 <_ZN6String4copyEPKcj>
 80a0eaa:	e001      	b.n	80a0eb0 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 80a0eac:	f7ff ffa0 	bl	80a0df0 <_ZN6String10invalidateEv>

	return *this;
}
 80a0eb0:	4620      	mov	r0, r4
 80a0eb2:	bd10      	pop	{r4, pc}

080a0eb4 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
 80a0eb4:	b510      	push	{r4, lr}
 80a0eb6:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a0eb8:	2300      	movs	r3, #0
 80a0eba:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a0ebc:	6043      	str	r3, [r0, #4]
	len = 0;
 80a0ebe:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a0ec0:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
 80a0ec2:	f7ff ffe8 	bl	80a0e96 <_ZN6StringaSERKS_>
}
 80a0ec6:	4620      	mov	r0, r4
 80a0ec8:	bd10      	pop	{r4, pc}

080a0eca <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80a0eca:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a0ecc:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80a0ece:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a0ed0:	b912      	cbnz	r2, 80a0ed8 <_ZNK6String6equalsEPKc+0xe>
 80a0ed2:	b919      	cbnz	r1, 80a0edc <_ZNK6String6equalsEPKc+0x12>
 80a0ed4:	2001      	movs	r0, #1
 80a0ed6:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 80a0ed8:	b911      	cbnz	r1, 80a0ee0 <_ZNK6String6equalsEPKc+0x16>
 80a0eda:	6803      	ldr	r3, [r0, #0]
 80a0edc:	7818      	ldrb	r0, [r3, #0]
 80a0ede:	e002      	b.n	80a0ee6 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
 80a0ee0:	6800      	ldr	r0, [r0, #0]
 80a0ee2:	f000 fcad 	bl	80a1840 <strcmp>
 80a0ee6:	fab0 f080 	clz	r0, r0
 80a0eea:	0940      	lsrs	r0, r0, #5
}
 80a0eec:	bd08      	pop	{r3, pc}
	...

080a0ef0 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a0ef0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a0ef4:	4b03      	ldr	r3, [pc, #12]	; (80a0f04 <_GLOBAL__sub_I_System+0x14>)
 80a0ef6:	2000      	movs	r0, #0
 80a0ef8:	7018      	strb	r0, [r3, #0]
 80a0efa:	8058      	strh	r0, [r3, #2]
 80a0efc:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0efe:	f7ff bcd3 	b.w	80a08a8 <set_system_mode>
 80a0f02:	bf00      	nop
 80a0f04:	200000ac 	.word	0x200000ac

080a0f08 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a0f08:	4b02      	ldr	r3, [pc, #8]	; (80a0f14 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a0f0a:	681a      	ldr	r2, [r3, #0]
 80a0f0c:	4b02      	ldr	r3, [pc, #8]	; (80a0f18 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a0f0e:	601a      	str	r2, [r3, #0]
 80a0f10:	4770      	bx	lr
 80a0f12:	bf00      	nop
 80a0f14:	20000000 	.word	0x20000000
 80a0f18:	200000b4 	.word	0x200000b4

080a0f1c <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a0f1c:	4770      	bx	lr

080a0f1e <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a0f1e:	7441      	strb	r1, [r0, #17]
 80a0f20:	4770      	bx	lr

080a0f22 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a0f22:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a0f24:	7c00      	ldrb	r0, [r0, #16]
 80a0f26:	f7ff fc77 	bl	80a0818 <HAL_USART_Available_Data_For_Write>
}
 80a0f2a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0f2e:	bd08      	pop	{r3, pc}

080a0f30 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a0f30:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a0f32:	7c00      	ldrb	r0, [r0, #16]
 80a0f34:	f7ff fc48 	bl	80a07c8 <HAL_USART_Available_Data>
}
 80a0f38:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0f3c:	bd08      	pop	{r3, pc}

080a0f3e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a0f3e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a0f40:	7c00      	ldrb	r0, [r0, #16]
 80a0f42:	f7ff fc51 	bl	80a07e8 <HAL_USART_Peek_Data>
}
 80a0f46:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a0f4a:	bf28      	it	cs
 80a0f4c:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a0f50:	bd08      	pop	{r3, pc}

080a0f52 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a0f52:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a0f54:	7c00      	ldrb	r0, [r0, #16]
 80a0f56:	f7ff fc3f 	bl	80a07d8 <HAL_USART_Read_Data>
}
 80a0f5a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a0f5e:	bf28      	it	cs
 80a0f60:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a0f64:	bd08      	pop	{r3, pc}

080a0f66 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a0f66:	7c00      	ldrb	r0, [r0, #16]
 80a0f68:	f7ff bc46 	b.w	80a07f8 <HAL_USART_Flush_Data>

080a0f6c <_ZN11USARTSerialD0Ev>:
 80a0f6c:	b510      	push	{r4, lr}
 80a0f6e:	4604      	mov	r4, r0
 80a0f70:	2114      	movs	r1, #20
 80a0f72:	f000 fad0 	bl	80a1516 <_ZdlPvj>
 80a0f76:	4620      	mov	r0, r4
 80a0f78:	bd10      	pop	{r4, pc}

080a0f7a <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a0f7a:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a0f7c:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a0f7e:	4604      	mov	r4, r0
 80a0f80:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a0f82:	b925      	cbnz	r5, 80a0f8e <_ZN11USARTSerial5writeEh+0x14>
 80a0f84:	7c00      	ldrb	r0, [r0, #16]
 80a0f86:	f7ff fc47 	bl	80a0818 <HAL_USART_Available_Data_For_Write>
 80a0f8a:	2800      	cmp	r0, #0
 80a0f8c:	dd05      	ble.n	80a0f9a <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a0f8e:	4631      	mov	r1, r6
 80a0f90:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a0f92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a0f96:	f7ff bc0f 	b.w	80a07b8 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a0f9a:	4628      	mov	r0, r5
 80a0f9c:	bd70      	pop	{r4, r5, r6, pc}
	...

080a0fa0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a0fa0:	b510      	push	{r4, lr}
 80a0fa2:	4604      	mov	r4, r0
 80a0fa4:	4608      	mov	r0, r1
 80a0fa6:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a0fa8:	2200      	movs	r2, #0
 80a0faa:	6062      	str	r2, [r4, #4]
 80a0fac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a0fb0:	60a2      	str	r2, [r4, #8]
 80a0fb2:	4a05      	ldr	r2, [pc, #20]	; (80a0fc8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a0fb4:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a0fb6:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a0fb8:	2201      	movs	r2, #1
 80a0fba:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a0fbc:	461a      	mov	r2, r3
 80a0fbe:	f7ff fbf3 	bl	80a07a8 <HAL_USART_Init>
}
 80a0fc2:	4620      	mov	r0, r4
 80a0fc4:	bd10      	pop	{r4, pc}
 80a0fc6:	bf00      	nop
 80a0fc8:	080a1a6c 	.word	0x080a1a6c

080a0fcc <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a0fcc:	7c00      	ldrb	r0, [r0, #16]
 80a0fce:	f7ff bc1b 	b.w	80a0808 <HAL_USART_Is_Enabled>
	...

080a0fd4 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a0fd4:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a0fd6:	4d0c      	ldr	r5, [pc, #48]	; (80a1008 <_Z22__fetch_global_Serial1v+0x34>)
 80a0fd8:	6829      	ldr	r1, [r5, #0]
 80a0fda:	f011 0401 	ands.w	r4, r1, #1
 80a0fde:	d111      	bne.n	80a1004 <_Z22__fetch_global_Serial1v+0x30>
 80a0fe0:	4628      	mov	r0, r5
 80a0fe2:	f7ff f85c 	bl	80a009e <__cxa_guard_acquire>
 80a0fe6:	b168      	cbz	r0, 80a1004 <_Z22__fetch_global_Serial1v+0x30>
 80a0fe8:	4a08      	ldr	r2, [pc, #32]	; (80a100c <_Z22__fetch_global_Serial1v+0x38>)
 80a0fea:	4621      	mov	r1, r4
 80a0fec:	4b08      	ldr	r3, [pc, #32]	; (80a1010 <_Z22__fetch_global_Serial1v+0x3c>)
 80a0fee:	4809      	ldr	r0, [pc, #36]	; (80a1014 <_Z22__fetch_global_Serial1v+0x40>)
 80a0ff0:	f7ff ffd6 	bl	80a0fa0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a0ff4:	4628      	mov	r0, r5
 80a0ff6:	f7ff f857 	bl	80a00a8 <__cxa_guard_release>
 80a0ffa:	4a07      	ldr	r2, [pc, #28]	; (80a1018 <_Z22__fetch_global_Serial1v+0x44>)
 80a0ffc:	4907      	ldr	r1, [pc, #28]	; (80a101c <_Z22__fetch_global_Serial1v+0x48>)
 80a0ffe:	4805      	ldr	r0, [pc, #20]	; (80a1014 <_Z22__fetch_global_Serial1v+0x40>)
 80a1000:	f000 fa84 	bl	80a150c <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a1004:	4803      	ldr	r0, [pc, #12]	; (80a1014 <_Z22__fetch_global_Serial1v+0x40>)
 80a1006:	bd38      	pop	{r3, r4, r5, pc}
 80a1008:	20000150 	.word	0x20000150
 80a100c:	20000154 	.word	0x20000154
 80a1010:	200000cc 	.word	0x200000cc
 80a1014:	200000b8 	.word	0x200000b8
 80a1018:	20000068 	.word	0x20000068
 80a101c:	080a0f1d 	.word	0x080a0f1d

080a1020 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1020:	7441      	strb	r1, [r0, #17]
 80a1022:	4770      	bx	lr

080a1024 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a1024:	4770      	bx	lr

080a1026 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a1026:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a1028:	2100      	movs	r1, #0
 80a102a:	7c00      	ldrb	r0, [r0, #16]
 80a102c:	f7ff fc1c 	bl	80a0868 <HAL_USB_USART_Receive_Data>
}
 80a1030:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1034:	bf28      	it	cs
 80a1036:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a103a:	bd08      	pop	{r3, pc}

080a103c <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a103c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a103e:	2101      	movs	r1, #1
 80a1040:	7c00      	ldrb	r0, [r0, #16]
 80a1042:	f7ff fc11 	bl	80a0868 <HAL_USB_USART_Receive_Data>
}
 80a1046:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a104a:	bf28      	it	cs
 80a104c:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a1050:	bd08      	pop	{r3, pc}

080a1052 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a1052:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a1054:	7c00      	ldrb	r0, [r0, #16]
 80a1056:	f7ff fbff 	bl	80a0858 <HAL_USB_USART_Available_Data_For_Write>
}
 80a105a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a105e:	bd08      	pop	{r3, pc}

080a1060 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a1060:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a1062:	7c00      	ldrb	r0, [r0, #16]
 80a1064:	f7ff fbf0 	bl	80a0848 <HAL_USB_USART_Available_Data>
}
 80a1068:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a106c:	bd08      	pop	{r3, pc}

080a106e <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a106e:	7c00      	ldrb	r0, [r0, #16]
 80a1070:	f7ff bc0a 	b.w	80a0888 <HAL_USB_USART_Flush_Data>

080a1074 <_ZN9USBSerialD0Ev>:
 80a1074:	b510      	push	{r4, lr}
 80a1076:	4604      	mov	r4, r0
 80a1078:	2114      	movs	r1, #20
 80a107a:	f000 fa4c 	bl	80a1516 <_ZdlPvj>
 80a107e:	4620      	mov	r0, r4
 80a1080:	bd10      	pop	{r4, pc}

080a1082 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a1082:	b538      	push	{r3, r4, r5, lr}
 80a1084:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a1086:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a1088:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a108a:	f7ff fbe5 	bl	80a0858 <HAL_USB_USART_Available_Data_For_Write>
 80a108e:	2800      	cmp	r0, #0
 80a1090:	dc01      	bgt.n	80a1096 <_ZN9USBSerial5writeEh+0x14>
 80a1092:	7c60      	ldrb	r0, [r4, #17]
 80a1094:	b128      	cbz	r0, 80a10a2 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a1096:	4629      	mov	r1, r5
 80a1098:	7c20      	ldrb	r0, [r4, #16]
 80a109a:	f7ff fbed 	bl	80a0878 <HAL_USB_USART_Send_Data>
 80a109e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a10a2:	bd38      	pop	{r3, r4, r5, pc}

080a10a4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a10a4:	b510      	push	{r4, lr}
 80a10a6:	4604      	mov	r4, r0
 80a10a8:	2300      	movs	r3, #0
 80a10aa:	6063      	str	r3, [r4, #4]
 80a10ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a10b0:	60a3      	str	r3, [r4, #8]
 80a10b2:	4b05      	ldr	r3, [pc, #20]	; (80a10c8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a10b4:	4608      	mov	r0, r1
 80a10b6:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a10b8:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a10ba:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a10bc:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a10be:	4611      	mov	r1, r2
 80a10c0:	f7ff fbb2 	bl	80a0828 <HAL_USB_USART_Init>
}
 80a10c4:	4620      	mov	r0, r4
 80a10c6:	bd10      	pop	{r4, pc}
 80a10c8:	080a1a9c 	.word	0x080a1a9c

080a10cc <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a10cc:	2200      	movs	r2, #0
 80a10ce:	7c00      	ldrb	r0, [r0, #16]
 80a10d0:	f7ff bbb2 	b.w	80a0838 <HAL_USB_USART_Begin>

080a10d4 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a10d4:	b510      	push	{r4, lr}
 80a10d6:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a10d8:	2214      	movs	r2, #20
 80a10da:	2100      	movs	r1, #0
 80a10dc:	f000 fb7f 	bl	80a17de <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a10e0:	4b05      	ldr	r3, [pc, #20]	; (80a10f8 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a10e2:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a10e4:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a10e6:	4b05      	ldr	r3, [pc, #20]	; (80a10fc <_Z19acquireSerialBufferv+0x28>)
 80a10e8:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a10ea:	f240 1301 	movw	r3, #257	; 0x101
 80a10ee:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a10f0:	2381      	movs	r3, #129	; 0x81
 80a10f2:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a10f4:	bd10      	pop	{r4, pc}
 80a10f6:	bf00      	nop
 80a10f8:	2000025d 	.word	0x2000025d
 80a10fc:	200001dc 	.word	0x200001dc

080a1100 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a1100:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1102:	4d0e      	ldr	r5, [pc, #56]	; (80a113c <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a1104:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a1106:	a801      	add	r0, sp, #4
 80a1108:	f7ff ffe4 	bl	80a10d4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a110c:	6829      	ldr	r1, [r5, #0]
 80a110e:	f011 0401 	ands.w	r4, r1, #1
 80a1112:	d110      	bne.n	80a1136 <_Z16_fetch_usbserialv+0x36>
 80a1114:	4628      	mov	r0, r5
 80a1116:	f7fe ffc2 	bl	80a009e <__cxa_guard_acquire>
 80a111a:	b160      	cbz	r0, 80a1136 <_Z16_fetch_usbserialv+0x36>
 80a111c:	aa01      	add	r2, sp, #4
 80a111e:	4621      	mov	r1, r4
 80a1120:	4807      	ldr	r0, [pc, #28]	; (80a1140 <_Z16_fetch_usbserialv+0x40>)
 80a1122:	f7ff ffbf 	bl	80a10a4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1126:	4628      	mov	r0, r5
 80a1128:	f7fe ffbe 	bl	80a00a8 <__cxa_guard_release>
 80a112c:	4a05      	ldr	r2, [pc, #20]	; (80a1144 <_Z16_fetch_usbserialv+0x44>)
 80a112e:	4906      	ldr	r1, [pc, #24]	; (80a1148 <_Z16_fetch_usbserialv+0x48>)
 80a1130:	4803      	ldr	r0, [pc, #12]	; (80a1140 <_Z16_fetch_usbserialv+0x40>)
 80a1132:	f000 f9eb 	bl	80a150c <__aeabi_atexit>
	return _usbserial;
}
 80a1136:	4802      	ldr	r0, [pc, #8]	; (80a1140 <_Z16_fetch_usbserialv+0x40>)
 80a1138:	b007      	add	sp, #28
 80a113a:	bd30      	pop	{r4, r5, pc}
 80a113c:	200001d8 	.word	0x200001d8
 80a1140:	20000360 	.word	0x20000360
 80a1144:	20000068 	.word	0x20000068
 80a1148:	080a1025 	.word	0x080a1025

080a114c <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a114c:	b510      	push	{r4, lr}
 80a114e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1150:	2214      	movs	r2, #20
 80a1152:	2100      	movs	r1, #0
 80a1154:	f000 fb43 	bl	80a17de <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a1158:	4b05      	ldr	r3, [pc, #20]	; (80a1170 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a115a:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a115c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a115e:	4b05      	ldr	r3, [pc, #20]	; (80a1174 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a1160:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a1162:	f240 1301 	movw	r3, #257	; 0x101
 80a1166:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a1168:	2381      	movs	r3, #129	; 0x81
 80a116a:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a116c:	bd10      	pop	{r4, pc}
 80a116e:	bf00      	nop
 80a1170:	20000410 	.word	0x20000410
 80a1174:	20000378 	.word	0x20000378

080a1178 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a1178:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a117a:	4c0e      	ldr	r4, [pc, #56]	; (80a11b4 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a117c:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a117e:	a801      	add	r0, sp, #4
 80a1180:	f7ff ffe4 	bl	80a114c <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1184:	6823      	ldr	r3, [r4, #0]
 80a1186:	07db      	lsls	r3, r3, #31
 80a1188:	d410      	bmi.n	80a11ac <_Z17_fetch_usbserial1v+0x34>
 80a118a:	4620      	mov	r0, r4
 80a118c:	f7fe ff87 	bl	80a009e <__cxa_guard_acquire>
 80a1190:	b160      	cbz	r0, 80a11ac <_Z17_fetch_usbserial1v+0x34>
 80a1192:	aa01      	add	r2, sp, #4
 80a1194:	2101      	movs	r1, #1
 80a1196:	4808      	ldr	r0, [pc, #32]	; (80a11b8 <_Z17_fetch_usbserial1v+0x40>)
 80a1198:	f7ff ff84 	bl	80a10a4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a119c:	4620      	mov	r0, r4
 80a119e:	f7fe ff83 	bl	80a00a8 <__cxa_guard_release>
 80a11a2:	4a06      	ldr	r2, [pc, #24]	; (80a11bc <_Z17_fetch_usbserial1v+0x44>)
 80a11a4:	4906      	ldr	r1, [pc, #24]	; (80a11c0 <_Z17_fetch_usbserial1v+0x48>)
 80a11a6:	4804      	ldr	r0, [pc, #16]	; (80a11b8 <_Z17_fetch_usbserial1v+0x40>)
 80a11a8:	f000 f9b0 	bl	80a150c <__aeabi_atexit>
  return _usbserial1;
}
 80a11ac:	4802      	ldr	r0, [pc, #8]	; (80a11b8 <_Z17_fetch_usbserial1v+0x40>)
 80a11ae:	b006      	add	sp, #24
 80a11b0:	bd10      	pop	{r4, pc}
 80a11b2:	bf00      	nop
 80a11b4:	20000374 	.word	0x20000374
 80a11b8:	200003fc 	.word	0x200003fc
 80a11bc:	20000068 	.word	0x20000068
 80a11c0:	080a1025 	.word	0x080a1025

080a11c4 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a11c4:	2200      	movs	r2, #0
 80a11c6:	4611      	mov	r1, r2
 80a11c8:	6840      	ldr	r0, [r0, #4]
 80a11ca:	f7ff bbc1 	b.w	80a0950 <network_ready>

080a11ce <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a11ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a11d0:	4616      	mov	r6, r2
 80a11d2:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a11d4:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a11d6:	460f      	mov	r7, r1
 80a11d8:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a11da:	2100      	movs	r1, #0
 80a11dc:	a803      	add	r0, sp, #12
 80a11de:	f000 fafe 	bl	80a17de <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a11e2:	4630      	mov	r0, r6
 80a11e4:	f000 fb36 	bl	80a1854 <strlen>
 80a11e8:	2500      	movs	r5, #0
 80a11ea:	9500      	str	r5, [sp, #0]
 80a11ec:	b281      	uxth	r1, r0
 80a11ee:	687b      	ldr	r3, [r7, #4]
 80a11f0:	aa03      	add	r2, sp, #12
 80a11f2:	4630      	mov	r0, r6
 80a11f4:	f7ff fb50 	bl	80a0898 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a11f8:	b120      	cbz	r0, 80a1204 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a11fa:	4629      	mov	r1, r5
 80a11fc:	4620      	mov	r0, r4
 80a11fe:	f7ff fcbd 	bl	80a0b7c <_ZN9IPAddressC1Em>
 80a1202:	e003      	b.n	80a120c <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a1204:	a903      	add	r1, sp, #12
 80a1206:	4620      	mov	r0, r4
 80a1208:	f7ff fca6 	bl	80a0b58 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a120c:	4620      	mov	r0, r4
 80a120e:	b009      	add	sp, #36	; 0x24
 80a1210:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a1212 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a1212:	2200      	movs	r2, #0
 80a1214:	4611      	mov	r1, r2
 80a1216:	6840      	ldr	r0, [r0, #4]
 80a1218:	f7ff bbba 	b.w	80a0990 <network_listening>

080a121c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a121c:	2200      	movs	r2, #0
 80a121e:	4611      	mov	r1, r2
 80a1220:	6840      	ldr	r0, [r0, #4]
 80a1222:	f7ff bbc5 	b.w	80a09b0 <network_get_listen_timeout>

080a1226 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a1226:	2200      	movs	r2, #0
 80a1228:	6840      	ldr	r0, [r0, #4]
 80a122a:	f7ff bbb9 	b.w	80a09a0 <network_set_listen_timeout>

080a122e <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a122e:	2200      	movs	r2, #0
 80a1230:	f081 0101 	eor.w	r1, r1, #1
 80a1234:	6840      	ldr	r0, [r0, #4]
 80a1236:	f7ff bba3 	b.w	80a0980 <network_listen>

080a123a <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a123a:	2300      	movs	r3, #0
 80a123c:	461a      	mov	r2, r3
 80a123e:	4619      	mov	r1, r3
 80a1240:	6840      	ldr	r0, [r0, #4]
 80a1242:	f7ff bb95 	b.w	80a0970 <network_off>

080a1246 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a1246:	2300      	movs	r3, #0
 80a1248:	461a      	mov	r2, r3
 80a124a:	4619      	mov	r1, r3
 80a124c:	6840      	ldr	r0, [r0, #4]
 80a124e:	f7ff bb87 	b.w	80a0960 <network_on>

080a1252 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a1252:	2200      	movs	r2, #0
 80a1254:	4611      	mov	r1, r2
 80a1256:	6840      	ldr	r0, [r0, #4]
 80a1258:	f7ff bb6a 	b.w	80a0930 <network_connecting>

080a125c <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a125c:	2200      	movs	r2, #0
 80a125e:	2102      	movs	r1, #2
 80a1260:	6840      	ldr	r0, [r0, #4]
 80a1262:	f7ff bb6d 	b.w	80a0940 <network_disconnect>

080a1266 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a1266:	2300      	movs	r3, #0
 80a1268:	461a      	mov	r2, r3
 80a126a:	6840      	ldr	r0, [r0, #4]
 80a126c:	f7ff bb58 	b.w	80a0920 <network_connect>

080a1270 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a1270:	4b02      	ldr	r3, [pc, #8]	; (80a127c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a1272:	2204      	movs	r2, #4
 80a1274:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a1276:	4a02      	ldr	r2, [pc, #8]	; (80a1280 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a1278:	601a      	str	r2, [r3, #0]
 80a127a:	4770      	bx	lr
 80a127c:	20000514 	.word	0x20000514
 80a1280:	080a1acc 	.word	0x080a1acc

080a1284 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a1284:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a1286:	4b14      	ldr	r3, [pc, #80]	; (80a12d8 <serialEventRun+0x54>)
 80a1288:	b133      	cbz	r3, 80a1298 <serialEventRun+0x14>
 80a128a:	f7ff ff39 	bl	80a1100 <_Z16_fetch_usbserialv>
 80a128e:	6803      	ldr	r3, [r0, #0]
 80a1290:	691b      	ldr	r3, [r3, #16]
 80a1292:	4798      	blx	r3
 80a1294:	2800      	cmp	r0, #0
 80a1296:	dc16      	bgt.n	80a12c6 <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a1298:	4b10      	ldr	r3, [pc, #64]	; (80a12dc <serialEventRun+0x58>)
 80a129a:	b133      	cbz	r3, 80a12aa <serialEventRun+0x26>
 80a129c:	f7ff fe9a 	bl	80a0fd4 <_Z22__fetch_global_Serial1v>
 80a12a0:	6803      	ldr	r3, [r0, #0]
 80a12a2:	691b      	ldr	r3, [r3, #16]
 80a12a4:	4798      	blx	r3
 80a12a6:	2800      	cmp	r0, #0
 80a12a8:	dc10      	bgt.n	80a12cc <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a12aa:	4b0d      	ldr	r3, [pc, #52]	; (80a12e0 <serialEventRun+0x5c>)
 80a12ac:	b10b      	cbz	r3, 80a12b2 <serialEventRun+0x2e>
 80a12ae:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a12b2:	4b0c      	ldr	r3, [pc, #48]	; (80a12e4 <serialEventRun+0x60>)
 80a12b4:	b17b      	cbz	r3, 80a12d6 <serialEventRun+0x52>
 80a12b6:	f7ff ff5f 	bl	80a1178 <_Z17_fetch_usbserial1v>
 80a12ba:	6803      	ldr	r3, [r0, #0]
 80a12bc:	691b      	ldr	r3, [r3, #16]
 80a12be:	4798      	blx	r3
 80a12c0:	2800      	cmp	r0, #0
 80a12c2:	dc06      	bgt.n	80a12d2 <serialEventRun+0x4e>
 80a12c4:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a12c6:	f3af 8000 	nop.w
 80a12ca:	e7e5      	b.n	80a1298 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a12cc:	f3af 8000 	nop.w
 80a12d0:	e7eb      	b.n	80a12aa <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a12d2:	f3af 8000 	nop.w
 80a12d6:	bd08      	pop	{r3, pc}
	...

080a12e8 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a12e8:	b508      	push	{r3, lr}
	serialEventRun();
 80a12ea:	f7ff ffcb 	bl	80a1284 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a12ee:	f7ff f9e9 	bl	80a06c4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a12f2:	4b01      	ldr	r3, [pc, #4]	; (80a12f8 <_post_loop+0x10>)
 80a12f4:	6018      	str	r0, [r3, #0]
 80a12f6:	bd08      	pop	{r3, pc}
 80a12f8:	20000524 	.word	0x20000524

080a12fc <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a12fc:	4802      	ldr	r0, [pc, #8]	; (80a1308 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a12fe:	4a03      	ldr	r2, [pc, #12]	; (80a130c <_Z33system_initialize_user_backup_ramv+0x10>)
 80a1300:	4903      	ldr	r1, [pc, #12]	; (80a1310 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a1302:	1a12      	subs	r2, r2, r0
 80a1304:	f000 ba60 	b.w	80a17c8 <memcpy>
 80a1308:	40024000 	.word	0x40024000
 80a130c:	40024004 	.word	0x40024004
 80a1310:	080a1ba0 	.word	0x080a1ba0

080a1314 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a1314:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1316:	2300      	movs	r3, #0
 80a1318:	9300      	str	r3, [sp, #0]
 80a131a:	461a      	mov	r2, r3
 80a131c:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a1320:	f7ff fadc 	bl	80a08dc <system_ctrl_set_result>
}
 80a1324:	b003      	add	sp, #12
 80a1326:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a132c <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a132c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a132e:	8843      	ldrh	r3, [r0, #2]
 80a1330:	2b0a      	cmp	r3, #10
 80a1332:	d008      	beq.n	80a1346 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a1334:	2b50      	cmp	r3, #80	; 0x50
 80a1336:	d109      	bne.n	80a134c <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a1338:	4b09      	ldr	r3, [pc, #36]	; (80a1360 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a133a:	681b      	ldr	r3, [r3, #0]
 80a133c:	b13b      	cbz	r3, 80a134e <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a133e:	b003      	add	sp, #12
 80a1340:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a1344:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a1346:	f7ff ffe5 	bl	80a1314 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a134a:	e006      	b.n	80a135a <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a134c:	2300      	movs	r3, #0
 80a134e:	9300      	str	r3, [sp, #0]
 80a1350:	461a      	mov	r2, r3
 80a1352:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a1356:	f7ff fac1 	bl	80a08dc <system_ctrl_set_result>
        break;
    }
}
 80a135a:	b003      	add	sp, #12
 80a135c:	f85d fb04 	ldr.w	pc, [sp], #4
 80a1360:	2000051c 	.word	0x2000051c

080a1364 <module_user_init_hook>:

void module_user_init_hook()
{
 80a1364:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a1366:	4c10      	ldr	r4, [pc, #64]	; (80a13a8 <module_user_init_hook+0x44>)
 80a1368:	4d10      	ldr	r5, [pc, #64]	; (80a13ac <module_user_init_hook+0x48>)
 80a136a:	6823      	ldr	r3, [r4, #0]
 80a136c:	42ab      	cmp	r3, r5
 80a136e:	4b10      	ldr	r3, [pc, #64]	; (80a13b0 <module_user_init_hook+0x4c>)
 80a1370:	bf0c      	ite	eq
 80a1372:	2201      	moveq	r2, #1
 80a1374:	2200      	movne	r2, #0
 80a1376:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a1378:	d002      	beq.n	80a1380 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a137a:	f7ff ffbf 	bl	80a12fc <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a137e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a1380:	f7ff f998 	bl	80a06b4 <HAL_RNG_GetRandomNumber>
 80a1384:	4604      	mov	r4, r0
    srand(seed);
 80a1386:	f000 fa33 	bl	80a17f0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a138a:	4b0a      	ldr	r3, [pc, #40]	; (80a13b4 <module_user_init_hook+0x50>)
 80a138c:	b113      	cbz	r3, 80a1394 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a138e:	4620      	mov	r0, r4
 80a1390:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a1394:	2100      	movs	r1, #0
 80a1396:	4807      	ldr	r0, [pc, #28]	; (80a13b4 <module_user_init_hook+0x50>)
 80a1398:	f7ff faba 	bl	80a0910 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a139c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a13a0:	2100      	movs	r1, #0
 80a13a2:	4805      	ldr	r0, [pc, #20]	; (80a13b8 <module_user_init_hook+0x54>)
 80a13a4:	f7ff ba90 	b.w	80a08c8 <system_ctrl_set_app_request_handler>
 80a13a8:	40024000 	.word	0x40024000
 80a13ac:	9a271c1e 	.word	0x9a271c1e
 80a13b0:	20000520 	.word	0x20000520
 80a13b4:	00000000 	.word	0x00000000
 80a13b8:	080a132d 	.word	0x080a132d

080a13bc <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a13bc:	b510      	push	{r4, lr}
 80a13be:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a13c0:	480f      	ldr	r0, [pc, #60]	; (80a1400 <pinAvailable+0x44>)
 80a13c2:	f7ff fd0b 	bl	80a0ddc <_ZN8SPIClass9isEnabledEv>
 80a13c6:	b128      	cbz	r0, 80a13d4 <pinAvailable+0x18>
 80a13c8:	f1a4 030d 	sub.w	r3, r4, #13
 80a13cc:	2b02      	cmp	r3, #2
 80a13ce:	d801      	bhi.n	80a13d4 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a13d0:	2000      	movs	r0, #0
 80a13d2:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a13d4:	f000 f840 	bl	80a1458 <_Z19__fetch_global_Wirev>
 80a13d8:	f7ff fb8a 	bl	80a0af0 <_ZN7TwoWire9isEnabledEv>
 80a13dc:	b108      	cbz	r0, 80a13e2 <pinAvailable+0x26>
 80a13de:	2c01      	cmp	r4, #1
 80a13e0:	d9f6      	bls.n	80a13d0 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a13e2:	f7ff fdf7 	bl	80a0fd4 <_Z22__fetch_global_Serial1v>
 80a13e6:	f7ff fdf1 	bl	80a0fcc <_ZN11USARTSerial9isEnabledEv>
 80a13ea:	b118      	cbz	r0, 80a13f4 <pinAvailable+0x38>
 80a13ec:	f1a4 0312 	sub.w	r3, r4, #18
 80a13f0:	2b01      	cmp	r3, #1
 80a13f2:	d9ed      	bls.n	80a13d0 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a13f4:	2c17      	cmp	r4, #23
 80a13f6:	bf8c      	ite	hi
 80a13f8:	2000      	movhi	r0, #0
 80a13fa:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a13fc:	bd10      	pop	{r4, pc}
 80a13fe:	bf00      	nop
 80a1400:	20000558 	.word	0x20000558

080a1404 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a1404:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a1406:	b538      	push	{r3, r4, r5, lr}
 80a1408:	4604      	mov	r4, r0
 80a140a:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a140c:	d80a      	bhi.n	80a1424 <pinMode+0x20>
 80a140e:	29ff      	cmp	r1, #255	; 0xff
 80a1410:	d008      	beq.n	80a1424 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a1412:	f7ff ffd3 	bl	80a13bc <pinAvailable>
 80a1416:	b128      	cbz	r0, 80a1424 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a1418:	4629      	mov	r1, r5
 80a141a:	4620      	mov	r0, r4
}
 80a141c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a1420:	f7ff b960 	b.w	80a06e4 <HAL_Pin_Mode>
 80a1424:	bd38      	pop	{r3, r4, r5, pc}

080a1426 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a1426:	b538      	push	{r3, r4, r5, lr}
 80a1428:	4604      	mov	r4, r0
 80a142a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a142c:	f7ff f962 	bl	80a06f4 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a1430:	28ff      	cmp	r0, #255	; 0xff
 80a1432:	d010      	beq.n	80a1456 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a1434:	2806      	cmp	r0, #6
 80a1436:	d804      	bhi.n	80a1442 <digitalWrite+0x1c>
 80a1438:	234d      	movs	r3, #77	; 0x4d
 80a143a:	fa23 f000 	lsr.w	r0, r3, r0
 80a143e:	07c3      	lsls	r3, r0, #31
 80a1440:	d409      	bmi.n	80a1456 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a1442:	4620      	mov	r0, r4
 80a1444:	f7ff ffba 	bl	80a13bc <pinAvailable>
 80a1448:	b128      	cbz	r0, 80a1456 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a144a:	4629      	mov	r1, r5
 80a144c:	4620      	mov	r0, r4
}
 80a144e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a1452:	f7ff b957 	b.w	80a0704 <HAL_GPIO_Write>
 80a1456:	bd38      	pop	{r3, r4, r5, pc}

080a1458 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a1458:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a145a:	4d0b      	ldr	r5, [pc, #44]	; (80a1488 <_Z19__fetch_global_Wirev+0x30>)
 80a145c:	6829      	ldr	r1, [r5, #0]
 80a145e:	f011 0401 	ands.w	r4, r1, #1
 80a1462:	d10f      	bne.n	80a1484 <_Z19__fetch_global_Wirev+0x2c>
 80a1464:	4628      	mov	r0, r5
 80a1466:	f7fe fe1a 	bl	80a009e <__cxa_guard_acquire>
 80a146a:	b158      	cbz	r0, 80a1484 <_Z19__fetch_global_Wirev+0x2c>
 80a146c:	4621      	mov	r1, r4
 80a146e:	4807      	ldr	r0, [pc, #28]	; (80a148c <_Z19__fetch_global_Wirev+0x34>)
 80a1470:	f7ff fb2c 	bl	80a0acc <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a1474:	4628      	mov	r0, r5
 80a1476:	f7fe fe17 	bl	80a00a8 <__cxa_guard_release>
 80a147a:	4a05      	ldr	r2, [pc, #20]	; (80a1490 <_Z19__fetch_global_Wirev+0x38>)
 80a147c:	4905      	ldr	r1, [pc, #20]	; (80a1494 <_Z19__fetch_global_Wirev+0x3c>)
 80a147e:	4803      	ldr	r0, [pc, #12]	; (80a148c <_Z19__fetch_global_Wirev+0x34>)
 80a1480:	f000 f844 	bl	80a150c <__aeabi_atexit>
	return wire;
}
 80a1484:	4801      	ldr	r0, [pc, #4]	; (80a148c <_Z19__fetch_global_Wirev+0x34>)
 80a1486:	bd38      	pop	{r3, r4, r5, pc}
 80a1488:	20000528 	.word	0x20000528
 80a148c:	2000052c 	.word	0x2000052c
 80a1490:	20000068 	.word	0x20000068
 80a1494:	080a0a73 	.word	0x080a0a73

080a1498 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a1498:	b513      	push	{r0, r1, r4, lr}
 80a149a:	4c08      	ldr	r4, [pc, #32]	; (80a14bc <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a149c:	2300      	movs	r3, #0
 80a149e:	461a      	mov	r2, r3
 80a14a0:	4619      	mov	r1, r3
 80a14a2:	9300      	str	r3, [sp, #0]
 80a14a4:	4620      	mov	r0, r4
 80a14a6:	f7ff fb7f 	bl	80a0ba8 <_ZN9IPAddressC1Ehhhh>
 80a14aa:	4620      	mov	r0, r4
 80a14ac:	4a04      	ldr	r2, [pc, #16]	; (80a14c0 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a14ae:	4905      	ldr	r1, [pc, #20]	; (80a14c4 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a14b0:	b002      	add	sp, #8
 80a14b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a14b6:	f000 b829 	b.w	80a150c <__aeabi_atexit>
 80a14ba:	bf00      	nop
 80a14bc:	20000540 	.word	0x20000540
 80a14c0:	20000068 	.word	0x20000068
 80a14c4:	080a0af9 	.word	0x080a0af9

080a14c8 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a14c8:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a14ca:	4c0c      	ldr	r4, [pc, #48]	; (80a14fc <_GLOBAL__sub_I_SPI+0x34>)
 80a14cc:	4e0c      	ldr	r6, [pc, #48]	; (80a1500 <_GLOBAL__sub_I_SPI+0x38>)
 80a14ce:	4d0d      	ldr	r5, [pc, #52]	; (80a1504 <_GLOBAL__sub_I_SPI+0x3c>)
 80a14d0:	2100      	movs	r1, #0
 80a14d2:	4620      	mov	r0, r4
 80a14d4:	f7ff fc6e 	bl	80a0db4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a14d8:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a14da:	4c0b      	ldr	r4, [pc, #44]	; (80a1508 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a14dc:	4632      	mov	r2, r6
 80a14de:	4629      	mov	r1, r5
 80a14e0:	f000 f814 	bl	80a150c <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a14e4:	2101      	movs	r1, #1
 80a14e6:	4620      	mov	r0, r4
 80a14e8:	f7ff fc64 	bl	80a0db4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a14ec:	4632      	mov	r2, r6
 80a14ee:	4629      	mov	r1, r5
 80a14f0:	4620      	mov	r0, r4
 80a14f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a14f6:	f000 b809 	b.w	80a150c <__aeabi_atexit>
 80a14fa:	bf00      	nop
 80a14fc:	20000558 	.word	0x20000558
 80a1500:	20000068 	.word	0x20000068
 80a1504:	080a0da5 	.word	0x080a0da5
 80a1508:	20000568 	.word	0x20000568

080a150c <__aeabi_atexit>:
 80a150c:	460b      	mov	r3, r1
 80a150e:	4601      	mov	r1, r0
 80a1510:	4618      	mov	r0, r3
 80a1512:	f000 b94b 	b.w	80a17ac <__cxa_atexit>

080a1516 <_ZdlPvj>:
 80a1516:	f7fe bdc0 	b.w	80a009a <_ZdlPv>
	...

080a151c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a151c:	4b24      	ldr	r3, [pc, #144]	; (80a15b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a151e:	681a      	ldr	r2, [r3, #0]
 80a1520:	07d0      	lsls	r0, r2, #31
 80a1522:	bf5c      	itt	pl
 80a1524:	2201      	movpl	r2, #1
 80a1526:	601a      	strpl	r2, [r3, #0]
 80a1528:	4b22      	ldr	r3, [pc, #136]	; (80a15b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a152a:	681a      	ldr	r2, [r3, #0]
 80a152c:	07d1      	lsls	r1, r2, #31
 80a152e:	bf5c      	itt	pl
 80a1530:	2201      	movpl	r2, #1
 80a1532:	601a      	strpl	r2, [r3, #0]
 80a1534:	4b20      	ldr	r3, [pc, #128]	; (80a15b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a1536:	681a      	ldr	r2, [r3, #0]
 80a1538:	07d2      	lsls	r2, r2, #31
 80a153a:	bf5c      	itt	pl
 80a153c:	2201      	movpl	r2, #1
 80a153e:	601a      	strpl	r2, [r3, #0]
 80a1540:	4b1e      	ldr	r3, [pc, #120]	; (80a15bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a1542:	681a      	ldr	r2, [r3, #0]
 80a1544:	07d0      	lsls	r0, r2, #31
 80a1546:	bf5c      	itt	pl
 80a1548:	2201      	movpl	r2, #1
 80a154a:	601a      	strpl	r2, [r3, #0]
 80a154c:	4b1c      	ldr	r3, [pc, #112]	; (80a15c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a154e:	681a      	ldr	r2, [r3, #0]
 80a1550:	07d1      	lsls	r1, r2, #31
 80a1552:	bf5c      	itt	pl
 80a1554:	2201      	movpl	r2, #1
 80a1556:	601a      	strpl	r2, [r3, #0]
 80a1558:	4b1a      	ldr	r3, [pc, #104]	; (80a15c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a155a:	681a      	ldr	r2, [r3, #0]
 80a155c:	07d2      	lsls	r2, r2, #31
 80a155e:	bf5c      	itt	pl
 80a1560:	2201      	movpl	r2, #1
 80a1562:	601a      	strpl	r2, [r3, #0]
 80a1564:	4b18      	ldr	r3, [pc, #96]	; (80a15c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a1566:	681a      	ldr	r2, [r3, #0]
 80a1568:	07d0      	lsls	r0, r2, #31
 80a156a:	bf5c      	itt	pl
 80a156c:	2201      	movpl	r2, #1
 80a156e:	601a      	strpl	r2, [r3, #0]
 80a1570:	4b16      	ldr	r3, [pc, #88]	; (80a15cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a1572:	681a      	ldr	r2, [r3, #0]
 80a1574:	07d1      	lsls	r1, r2, #31
 80a1576:	bf5c      	itt	pl
 80a1578:	2201      	movpl	r2, #1
 80a157a:	601a      	strpl	r2, [r3, #0]
 80a157c:	4b14      	ldr	r3, [pc, #80]	; (80a15d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a157e:	681a      	ldr	r2, [r3, #0]
 80a1580:	07d2      	lsls	r2, r2, #31
 80a1582:	bf5c      	itt	pl
 80a1584:	2201      	movpl	r2, #1
 80a1586:	601a      	strpl	r2, [r3, #0]
 80a1588:	4b12      	ldr	r3, [pc, #72]	; (80a15d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a158a:	681a      	ldr	r2, [r3, #0]
 80a158c:	07d0      	lsls	r0, r2, #31
 80a158e:	bf5c      	itt	pl
 80a1590:	2201      	movpl	r2, #1
 80a1592:	601a      	strpl	r2, [r3, #0]
 80a1594:	4b10      	ldr	r3, [pc, #64]	; (80a15d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a1596:	681a      	ldr	r2, [r3, #0]
 80a1598:	07d1      	lsls	r1, r2, #31
 80a159a:	bf5c      	itt	pl
 80a159c:	2201      	movpl	r2, #1
 80a159e:	601a      	strpl	r2, [r3, #0]
 80a15a0:	4b0e      	ldr	r3, [pc, #56]	; (80a15dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a15a2:	681a      	ldr	r2, [r3, #0]
 80a15a4:	07d2      	lsls	r2, r2, #31
 80a15a6:	bf5c      	itt	pl
 80a15a8:	2201      	movpl	r2, #1
 80a15aa:	601a      	strpl	r2, [r3, #0]
 80a15ac:	4770      	bx	lr
 80a15ae:	bf00      	nop
 80a15b0:	200005a4 	.word	0x200005a4
 80a15b4:	200005a0 	.word	0x200005a0
 80a15b8:	2000059c 	.word	0x2000059c
 80a15bc:	20000598 	.word	0x20000598
 80a15c0:	20000594 	.word	0x20000594
 80a15c4:	20000590 	.word	0x20000590
 80a15c8:	2000058c 	.word	0x2000058c
 80a15cc:	20000588 	.word	0x20000588
 80a15d0:	20000584 	.word	0x20000584
 80a15d4:	20000580 	.word	0x20000580
 80a15d8:	2000057c 	.word	0x2000057c
 80a15dc:	20000578 	.word	0x20000578

080a15e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a15e0:	4b18      	ldr	r3, [pc, #96]	; (80a1644 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a15e2:	681a      	ldr	r2, [r3, #0]
 80a15e4:	07d1      	lsls	r1, r2, #31
 80a15e6:	bf5c      	itt	pl
 80a15e8:	2201      	movpl	r2, #1
 80a15ea:	601a      	strpl	r2, [r3, #0]
 80a15ec:	4b16      	ldr	r3, [pc, #88]	; (80a1648 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a15ee:	681a      	ldr	r2, [r3, #0]
 80a15f0:	07d2      	lsls	r2, r2, #31
 80a15f2:	bf5c      	itt	pl
 80a15f4:	2201      	movpl	r2, #1
 80a15f6:	601a      	strpl	r2, [r3, #0]
 80a15f8:	4b14      	ldr	r3, [pc, #80]	; (80a164c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a15fa:	681a      	ldr	r2, [r3, #0]
 80a15fc:	07d0      	lsls	r0, r2, #31
 80a15fe:	bf5c      	itt	pl
 80a1600:	2201      	movpl	r2, #1
 80a1602:	601a      	strpl	r2, [r3, #0]
 80a1604:	4b12      	ldr	r3, [pc, #72]	; (80a1650 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a1606:	681a      	ldr	r2, [r3, #0]
 80a1608:	07d1      	lsls	r1, r2, #31
 80a160a:	bf5c      	itt	pl
 80a160c:	2201      	movpl	r2, #1
 80a160e:	601a      	strpl	r2, [r3, #0]
 80a1610:	4b10      	ldr	r3, [pc, #64]	; (80a1654 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a1612:	681a      	ldr	r2, [r3, #0]
 80a1614:	07d2      	lsls	r2, r2, #31
 80a1616:	bf5c      	itt	pl
 80a1618:	2201      	movpl	r2, #1
 80a161a:	601a      	strpl	r2, [r3, #0]
 80a161c:	4b0e      	ldr	r3, [pc, #56]	; (80a1658 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a161e:	681a      	ldr	r2, [r3, #0]
 80a1620:	07d0      	lsls	r0, r2, #31
 80a1622:	bf5c      	itt	pl
 80a1624:	2201      	movpl	r2, #1
 80a1626:	601a      	strpl	r2, [r3, #0]
 80a1628:	4b0c      	ldr	r3, [pc, #48]	; (80a165c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a162a:	681a      	ldr	r2, [r3, #0]
 80a162c:	07d1      	lsls	r1, r2, #31
 80a162e:	bf5c      	itt	pl
 80a1630:	2201      	movpl	r2, #1
 80a1632:	601a      	strpl	r2, [r3, #0]
 80a1634:	4b0a      	ldr	r3, [pc, #40]	; (80a1660 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a1636:	681a      	ldr	r2, [r3, #0]
 80a1638:	07d2      	lsls	r2, r2, #31
 80a163a:	bf5c      	itt	pl
 80a163c:	2201      	movpl	r2, #1
 80a163e:	601a      	strpl	r2, [r3, #0]
 80a1640:	4770      	bx	lr
 80a1642:	bf00      	nop
 80a1644:	200005c4 	.word	0x200005c4
 80a1648:	200005c0 	.word	0x200005c0
 80a164c:	200005bc 	.word	0x200005bc
 80a1650:	200005b8 	.word	0x200005b8
 80a1654:	200005b4 	.word	0x200005b4
 80a1658:	200005b0 	.word	0x200005b0
 80a165c:	200005ac 	.word	0x200005ac
 80a1660:	200005a8 	.word	0x200005a8

080a1664 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a1664:	4b18      	ldr	r3, [pc, #96]	; (80a16c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a1666:	681a      	ldr	r2, [r3, #0]
 80a1668:	07d1      	lsls	r1, r2, #31
 80a166a:	bf5c      	itt	pl
 80a166c:	2201      	movpl	r2, #1
 80a166e:	601a      	strpl	r2, [r3, #0]
 80a1670:	4b16      	ldr	r3, [pc, #88]	; (80a16cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a1672:	681a      	ldr	r2, [r3, #0]
 80a1674:	07d2      	lsls	r2, r2, #31
 80a1676:	bf5c      	itt	pl
 80a1678:	2201      	movpl	r2, #1
 80a167a:	601a      	strpl	r2, [r3, #0]
 80a167c:	4b14      	ldr	r3, [pc, #80]	; (80a16d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a167e:	681a      	ldr	r2, [r3, #0]
 80a1680:	07d0      	lsls	r0, r2, #31
 80a1682:	bf5c      	itt	pl
 80a1684:	2201      	movpl	r2, #1
 80a1686:	601a      	strpl	r2, [r3, #0]
 80a1688:	4b12      	ldr	r3, [pc, #72]	; (80a16d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a168a:	681a      	ldr	r2, [r3, #0]
 80a168c:	07d1      	lsls	r1, r2, #31
 80a168e:	bf5c      	itt	pl
 80a1690:	2201      	movpl	r2, #1
 80a1692:	601a      	strpl	r2, [r3, #0]
 80a1694:	4b10      	ldr	r3, [pc, #64]	; (80a16d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a1696:	681a      	ldr	r2, [r3, #0]
 80a1698:	07d2      	lsls	r2, r2, #31
 80a169a:	bf5c      	itt	pl
 80a169c:	2201      	movpl	r2, #1
 80a169e:	601a      	strpl	r2, [r3, #0]
 80a16a0:	4b0e      	ldr	r3, [pc, #56]	; (80a16dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a16a2:	681a      	ldr	r2, [r3, #0]
 80a16a4:	07d0      	lsls	r0, r2, #31
 80a16a6:	bf5c      	itt	pl
 80a16a8:	2201      	movpl	r2, #1
 80a16aa:	601a      	strpl	r2, [r3, #0]
 80a16ac:	4b0c      	ldr	r3, [pc, #48]	; (80a16e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a16ae:	681a      	ldr	r2, [r3, #0]
 80a16b0:	07d1      	lsls	r1, r2, #31
 80a16b2:	bf5c      	itt	pl
 80a16b4:	2201      	movpl	r2, #1
 80a16b6:	601a      	strpl	r2, [r3, #0]
 80a16b8:	4b0a      	ldr	r3, [pc, #40]	; (80a16e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a16ba:	681a      	ldr	r2, [r3, #0]
 80a16bc:	07d2      	lsls	r2, r2, #31
 80a16be:	bf5c      	itt	pl
 80a16c0:	2201      	movpl	r2, #1
 80a16c2:	601a      	strpl	r2, [r3, #0]
 80a16c4:	4770      	bx	lr
 80a16c6:	bf00      	nop
 80a16c8:	200005e4 	.word	0x200005e4
 80a16cc:	200005e0 	.word	0x200005e0
 80a16d0:	200005dc 	.word	0x200005dc
 80a16d4:	200005d8 	.word	0x200005d8
 80a16d8:	200005d4 	.word	0x200005d4
 80a16dc:	200005d0 	.word	0x200005d0
 80a16e0:	200005cc 	.word	0x200005cc
 80a16e4:	200005c8 	.word	0x200005c8

080a16e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a16e8:	4b24      	ldr	r3, [pc, #144]	; (80a177c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a16ea:	681a      	ldr	r2, [r3, #0]
 80a16ec:	07d0      	lsls	r0, r2, #31
 80a16ee:	bf5c      	itt	pl
 80a16f0:	2201      	movpl	r2, #1
 80a16f2:	601a      	strpl	r2, [r3, #0]
 80a16f4:	4b22      	ldr	r3, [pc, #136]	; (80a1780 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a16f6:	681a      	ldr	r2, [r3, #0]
 80a16f8:	07d1      	lsls	r1, r2, #31
 80a16fa:	bf5c      	itt	pl
 80a16fc:	2201      	movpl	r2, #1
 80a16fe:	601a      	strpl	r2, [r3, #0]
 80a1700:	4b20      	ldr	r3, [pc, #128]	; (80a1784 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a1702:	681a      	ldr	r2, [r3, #0]
 80a1704:	07d2      	lsls	r2, r2, #31
 80a1706:	bf5c      	itt	pl
 80a1708:	2201      	movpl	r2, #1
 80a170a:	601a      	strpl	r2, [r3, #0]
 80a170c:	4b1e      	ldr	r3, [pc, #120]	; (80a1788 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a170e:	681a      	ldr	r2, [r3, #0]
 80a1710:	07d0      	lsls	r0, r2, #31
 80a1712:	bf5c      	itt	pl
 80a1714:	2201      	movpl	r2, #1
 80a1716:	601a      	strpl	r2, [r3, #0]
 80a1718:	4b1c      	ldr	r3, [pc, #112]	; (80a178c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a171a:	681a      	ldr	r2, [r3, #0]
 80a171c:	07d1      	lsls	r1, r2, #31
 80a171e:	bf5c      	itt	pl
 80a1720:	2201      	movpl	r2, #1
 80a1722:	601a      	strpl	r2, [r3, #0]
 80a1724:	4b1a      	ldr	r3, [pc, #104]	; (80a1790 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a1726:	681a      	ldr	r2, [r3, #0]
 80a1728:	07d2      	lsls	r2, r2, #31
 80a172a:	bf5c      	itt	pl
 80a172c:	2201      	movpl	r2, #1
 80a172e:	601a      	strpl	r2, [r3, #0]
 80a1730:	4b18      	ldr	r3, [pc, #96]	; (80a1794 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a1732:	681a      	ldr	r2, [r3, #0]
 80a1734:	07d0      	lsls	r0, r2, #31
 80a1736:	bf5c      	itt	pl
 80a1738:	2201      	movpl	r2, #1
 80a173a:	601a      	strpl	r2, [r3, #0]
 80a173c:	4b16      	ldr	r3, [pc, #88]	; (80a1798 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a173e:	681a      	ldr	r2, [r3, #0]
 80a1740:	07d1      	lsls	r1, r2, #31
 80a1742:	bf5c      	itt	pl
 80a1744:	2201      	movpl	r2, #1
 80a1746:	601a      	strpl	r2, [r3, #0]
 80a1748:	4b14      	ldr	r3, [pc, #80]	; (80a179c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a174a:	681a      	ldr	r2, [r3, #0]
 80a174c:	07d2      	lsls	r2, r2, #31
 80a174e:	bf5c      	itt	pl
 80a1750:	2201      	movpl	r2, #1
 80a1752:	601a      	strpl	r2, [r3, #0]
 80a1754:	4b12      	ldr	r3, [pc, #72]	; (80a17a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a1756:	681a      	ldr	r2, [r3, #0]
 80a1758:	07d0      	lsls	r0, r2, #31
 80a175a:	bf5c      	itt	pl
 80a175c:	2201      	movpl	r2, #1
 80a175e:	601a      	strpl	r2, [r3, #0]
 80a1760:	4b10      	ldr	r3, [pc, #64]	; (80a17a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a1762:	681a      	ldr	r2, [r3, #0]
 80a1764:	07d1      	lsls	r1, r2, #31
 80a1766:	bf5c      	itt	pl
 80a1768:	2201      	movpl	r2, #1
 80a176a:	601a      	strpl	r2, [r3, #0]
 80a176c:	4b0e      	ldr	r3, [pc, #56]	; (80a17a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a176e:	681a      	ldr	r2, [r3, #0]
 80a1770:	07d2      	lsls	r2, r2, #31
 80a1772:	bf5c      	itt	pl
 80a1774:	2201      	movpl	r2, #1
 80a1776:	601a      	strpl	r2, [r3, #0]
 80a1778:	4770      	bx	lr
 80a177a:	bf00      	nop
 80a177c:	20000614 	.word	0x20000614
 80a1780:	20000610 	.word	0x20000610
 80a1784:	2000060c 	.word	0x2000060c
 80a1788:	20000608 	.word	0x20000608
 80a178c:	20000604 	.word	0x20000604
 80a1790:	20000600 	.word	0x20000600
 80a1794:	200005fc 	.word	0x200005fc
 80a1798:	200005f8 	.word	0x200005f8
 80a179c:	200005f4 	.word	0x200005f4
 80a17a0:	200005f0 	.word	0x200005f0
 80a17a4:	200005ec 	.word	0x200005ec
 80a17a8:	200005e8 	.word	0x200005e8

080a17ac <__cxa_atexit>:
 80a17ac:	b510      	push	{r4, lr}
 80a17ae:	4c05      	ldr	r4, [pc, #20]	; (80a17c4 <__cxa_atexit+0x18>)
 80a17b0:	4613      	mov	r3, r2
 80a17b2:	b12c      	cbz	r4, 80a17c0 <__cxa_atexit+0x14>
 80a17b4:	460a      	mov	r2, r1
 80a17b6:	4601      	mov	r1, r0
 80a17b8:	2002      	movs	r0, #2
 80a17ba:	f3af 8000 	nop.w
 80a17be:	bd10      	pop	{r4, pc}
 80a17c0:	4620      	mov	r0, r4
 80a17c2:	bd10      	pop	{r4, pc}
 80a17c4:	00000000 	.word	0x00000000

080a17c8 <memcpy>:
 80a17c8:	b510      	push	{r4, lr}
 80a17ca:	1e43      	subs	r3, r0, #1
 80a17cc:	440a      	add	r2, r1
 80a17ce:	4291      	cmp	r1, r2
 80a17d0:	d004      	beq.n	80a17dc <memcpy+0x14>
 80a17d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a17d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a17da:	e7f8      	b.n	80a17ce <memcpy+0x6>
 80a17dc:	bd10      	pop	{r4, pc}

080a17de <memset>:
 80a17de:	4603      	mov	r3, r0
 80a17e0:	4402      	add	r2, r0
 80a17e2:	4293      	cmp	r3, r2
 80a17e4:	d002      	beq.n	80a17ec <memset+0xe>
 80a17e6:	f803 1b01 	strb.w	r1, [r3], #1
 80a17ea:	e7fa      	b.n	80a17e2 <memset+0x4>
 80a17ec:	4770      	bx	lr
	...

080a17f0 <srand>:
 80a17f0:	b538      	push	{r3, r4, r5, lr}
 80a17f2:	4b12      	ldr	r3, [pc, #72]	; (80a183c <srand+0x4c>)
 80a17f4:	4605      	mov	r5, r0
 80a17f6:	681c      	ldr	r4, [r3, #0]
 80a17f8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a17fa:	b9d3      	cbnz	r3, 80a1832 <srand+0x42>
 80a17fc:	2018      	movs	r0, #24
 80a17fe:	f7ff f8df 	bl	80a09c0 <malloc>
 80a1802:	f243 330e 	movw	r3, #13070	; 0x330e
 80a1806:	63a0      	str	r0, [r4, #56]	; 0x38
 80a1808:	8003      	strh	r3, [r0, #0]
 80a180a:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a180e:	8043      	strh	r3, [r0, #2]
 80a1810:	f241 2334 	movw	r3, #4660	; 0x1234
 80a1814:	8083      	strh	r3, [r0, #4]
 80a1816:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a181a:	80c3      	strh	r3, [r0, #6]
 80a181c:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a1820:	8103      	strh	r3, [r0, #8]
 80a1822:	2305      	movs	r3, #5
 80a1824:	8143      	strh	r3, [r0, #10]
 80a1826:	230b      	movs	r3, #11
 80a1828:	8183      	strh	r3, [r0, #12]
 80a182a:	2201      	movs	r2, #1
 80a182c:	2300      	movs	r3, #0
 80a182e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a1832:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a1834:	2200      	movs	r2, #0
 80a1836:	611d      	str	r5, [r3, #16]
 80a1838:	615a      	str	r2, [r3, #20]
 80a183a:	bd38      	pop	{r3, r4, r5, pc}
 80a183c:	20000064 	.word	0x20000064

080a1840 <strcmp>:
 80a1840:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a1844:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a1848:	2a01      	cmp	r2, #1
 80a184a:	bf28      	it	cs
 80a184c:	429a      	cmpcs	r2, r3
 80a184e:	d0f7      	beq.n	80a1840 <strcmp>
 80a1850:	1ad0      	subs	r0, r2, r3
 80a1852:	4770      	bx	lr

080a1854 <strlen>:
 80a1854:	4603      	mov	r3, r0
 80a1856:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a185a:	2a00      	cmp	r2, #0
 80a185c:	d1fb      	bne.n	80a1856 <strlen+0x2>
 80a185e:	1a18      	subs	r0, r3, r0
 80a1860:	3801      	subs	r0, #1
 80a1862:	4770      	bx	lr

080a1864 <dynalib_user>:
 80a1864:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a1874:	0000 0000 5554 4e52 4e49 2047 4552 2044     ....TURNING RED 
 80a1884:	4e4f 003a 4e45 4554 4552 2044 4f4c 504f     ON:.ENTERED LOOP
 80a1894:	003a 5247 4545 4e45 4f20 3a4e 4300 7261     :.GREEEN ON:.Car
 80a18a4:	2064 6564 6574 7463 6465 003a 3025 5832     d detected:.%02X
 80a18b4:	252d 3230 2d58 3025 5832 252d 3230 0058     -%02X-%02X-%02X.
 80a18c4:	6163 6472 4449 7300 6163 436e 7261 0064     cardID.scanCard.

080a18d4 <_ZTV7TwoWire>:
	...
 80a18dc:	0a73 080a 0abd 080a 0a95 080a 0a75 080a     s...........u...
 80a18ec:	0a9d 080a 0aa5 080a 0aad 080a 0ab5 080a     ................

080a18fc <_ZTV9IPAddress>:
	...
 80a1904:	0b09 080a 0af9 080a 0afb 080a 6162 6475     ............baud
 80a1914:	5300 7265 6169 006c 5355 5342 7265 6169     .Serial.USBSeria
 80a1924:	316c 7400 7079 0065 6170 6172 006d 6d63     l1.type.param.cm
 80a1934:	0064 6469 6800 646e 7300 7274 006d 6966     d.id.hnd.strm.fi
 80a1944:	746c 6c00 6c76 6100 6464 6148 646e 656c     lt.lvl.addHandle
 80a1954:	0072 6572 6f6d 6576 6148 646e 656c 0072     r.removeHandler.
 80a1964:	6e65 6d75 6148 646e 656c 7372 4a00 4f53     enumHandlers.JSO
 80a1974:	534e 7274 6165 4c6d 676f 6148 646e 656c     NStreamLogHandle
 80a1984:	0072 7061 0070 3025 3031 2075 5d00 0020     r.app.%010u .] .
 80a1994:	6425 2c00 0020 2928 203a 2000 005b 6f63     %d., .(): . [.co
 80a19a4:	6564 3d20 0020 6925 6400 7465 6961 736c     de = .%i.details
 80a19b4:	3d20 0020 0a0d 6600 6c00 006e 6e66 6300      = ....f.ln.fn.c
 80a19c4:	646f 0065 6564 6174 6c69 6e00 6e6f 0065     ode.detail.none.
 80a19d4:	7274 6361 0065 6e69 6f66 7700 7261 006e     trace.info.warn.
 80a19e4:	7265 6f72 0072 6170 696e 0063 6c61 006c     error.panic.all.

080a19f4 <_ZTVN5spark12NetworkClassE>:
	...
 80a19fc:	0bd1 080a 0bdb 080a 0be5 080a 0bef 080a     ................
 80a1a0c:	0bf9 080a 0c05 080a 0c11 080a 0c1d 080a     ................
 80a1a1c:	0c25 080a 0c2f 080a 0c39 080a               %.../...9...

080a1a28 <_ZTV8SPIClass>:
	...
 80a1a30:	0da5 080a 0da7 080a 005a 2b25 3330 3a64     ........Z.%+03d:
 80a1a40:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
 80a1a50:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
 80a1a60:	0000 0000                                   ....

080a1a64 <_ZTV11USARTSerial>:
	...
 80a1a6c:	0f1d 080a 0f6d 080a 0f7b 080a 0c9d 080a     ....m...{.......
 80a1a7c:	0f31 080a 0f53 080a 0f3f 080a 0f67 080a     1...S...?...g...
 80a1a8c:	0f1f 080a 0f23 080a                         ....#...

080a1a94 <_ZTV9USBSerial>:
	...
 80a1a9c:	1025 080a 1075 080a 1083 080a 0c9d 080a     %...u...........
 80a1aac:	1061 080a 1027 080a 103d 080a 106f 080a     a...'...=...o...
 80a1abc:	1053 080a 1021 080a                         S...!...

080a1ac4 <_ZTVN5spark9WiFiClassE>:
	...
 80a1acc:	1267 080a 125d 080a 1253 080a 11c5 080a     g...]...S.......
 80a1adc:	1247 080a 123b 080a 122f 080a 1227 080a     G...;.../...'...
 80a1aec:	121d 080a 1213 080a 11cf 080a               ............

080a1af8 <__sf_fake_stdin>:
	...

080a1b18 <__sf_fake_stdout>:
	...

080a1b38 <__sf_fake_stderr>:
	...
 80a1b58:	0043                                        C.

080a1b5a <link_const_variable_data_end>:
	...

080a1b5c <link_constructors_location>:
 80a1b5c:	080a053d 	.word	0x080a053d
 80a1b60:	080a0675 	.word	0x080a0675
 80a1b64:	080a0699 	.word	0x080a0699
 80a1b68:	080a069d 	.word	0x080a069d
 80a1b6c:	080a06a1 	.word	0x080a06a1
 80a1b70:	080a0bc1 	.word	0x080a0bc1
 80a1b74:	080a0c89 	.word	0x080a0c89
 80a1b78:	080a0d89 	.word	0x080a0d89
 80a1b7c:	080a0ef1 	.word	0x080a0ef1
 80a1b80:	080a0f09 	.word	0x080a0f09
 80a1b84:	080a1271 	.word	0x080a1271
 80a1b88:	080a1499 	.word	0x080a1499
 80a1b8c:	080a14c9 	.word	0x080a14c9
 80a1b90:	080a151d 	.word	0x080a151d
 80a1b94:	080a15e1 	.word	0x080a15e1
 80a1b98:	080a1665 	.word	0x080a1665
 80a1b9c:	080a16e9 	.word	0x080a16e9
